/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly '/api/login': {
        /** Connexion */
        readonly post: operations['login'];
        readonly parameters: {};
    };
    readonly '/api/logout': {
        /** Déconnexion */
        readonly post: operations['logout'];
        readonly parameters: {};
    };
    readonly '/api/carriers': {
        /** Récupère les transporteurs */
        readonly get: operations['getCarrierCollection'];
        /** Créer un transporteur */
        readonly post: operations['postCarrierCollection'];
        readonly parameters: {};
    };
    readonly '/api/carriers/{id}': {
        /** Supprime un transporteur */
        readonly delete: operations['deleteCarrierItem'];
        /** Modifie un transporteur */
        readonly patch: operations['patchCarrierItem'];
        readonly parameters: {};
    };
    readonly '/api/colors': {
        /** Récupère les couleurs */
        readonly get: operations['getColorCollection'];
        /** Créer une couleur */
        readonly post: operations['postColorCollection'];
        readonly parameters: {};
    };
    readonly '/api/colors/{id}': {
        /** Supprime une couleur */
        readonly delete: operations['deleteColorItem'];
        /** Modifie une couleur */
        readonly patch: operations['patchColorItem'];
        readonly parameters: {};
    };
    readonly '/api/component-families': {
        /** Récupère les familles de composant */
        readonly get: operations['getComponentFamilyCollection'];
        /** Créer une famille de composant */
        readonly post: operations['postComponentFamilyCollection'];
        readonly parameters: {};
    };
    readonly '/api/component-families/{id}': {
        /** Modifie une famille de composant */
        readonly post: operations['postComponentFamilyItem'];
        /** Supprime une famille de composant */
        readonly delete: operations['deleteComponentFamilyItem'];
        readonly parameters: {};
    };
    readonly '/api/currencies': {
        /** Récupère les devises */
        readonly get: operations['getCurrencyCollection'];
        readonly parameters: {};
    };
    readonly '/api/currencies/{id}': {
        /** Modifie une devise */
        readonly patch: operations['patchCurrencyItem'];
        readonly parameters: {};
    };
    readonly '/api/employees/{id}': {
        /** Récupère un employé */
        readonly get: operations['getEmployeeItem'];
        readonly parameters: {};
    };
    readonly '/api/counter-part-groups': {
        /** créer un groupe de contrepartie de test */
        readonly post: operations['postCounterPartGroupCollection'];
        readonly parameters: {};
    };
    readonly '/api/engine-groups': {
        /** Récupère les groupes d'équipement */
        readonly get: operations['getEngineGroupCollection'];
        readonly parameters: {};
    };
    readonly '/api/engine-groups/{id}': {
        /** Supprime un groupe d'équipement */
        readonly delete: operations['deleteEngineGroupItem'];
        /** Modifie un groupe d'équipement */
        readonly patch: operations['patchEngineGroupItem'];
        readonly parameters: {};
    };
    readonly '/api/tool-groups': {
        /** Créer un groupe d'outil */
        readonly post: operations['postToolGroupCollection'];
        readonly parameters: {};
    };
    readonly '/api/workstation-groups': {
        /** Créer un groupe de poste de travail */
        readonly post: operations['postWorkstationGroupCollection'];
        readonly parameters: {};
    };
    readonly '/api/event-types': {
        /** Récupère les types d'événements */
        readonly get: operations['getEventTypeCollection'];
        /** Créer un type d'événements */
        readonly post: operations['postEventTypeCollection'];
        readonly parameters: {};
    };
    readonly '/api/event-types/{id}': {
        /** Supprime un type d'événements */
        readonly delete: operations['deleteEventTypeItem'];
        /** Modifie un type d'événements */
        readonly patch: operations['patchEventTypeItem'];
        readonly parameters: {};
    };
    readonly '/api/incoterms': {
        /** Récupère les incoterms */
        readonly get: operations['getIncotermsCollection'];
        /** Créer un incoterms */
        readonly post: operations['postIncotermsCollection'];
        readonly parameters: {};
    };
    readonly '/api/incoterms/{id}': {
        /** Supprime un incoterms */
        readonly delete: operations['deleteIncotermsItem'];
        /** Modifie un incoterms */
        readonly patch: operations['patchIncotermsItem'];
        readonly parameters: {};
    };
    readonly '/api/invoice-time-dues': {
        /** Récupère les délais de paiement des factures */
        readonly get: operations['getInvoiceTimeDueCollection'];
        /** Créer un délai de paiement des factures */
        readonly post: operations['postInvoiceTimeDueCollection'];
        readonly parameters: {};
    };
    readonly '/api/invoice-time-dues/{id}': {
        /** Supprime un délai de paiement des factures */
        readonly delete: operations['deleteInvoiceTimeDueItem'];
        /** Modifie un délai de paiement des factures */
        readonly patch: operations['patchInvoiceTimeDueItem'];
        readonly parameters: {};
    };
    readonly '/api/out-trainers': {
        /** Récupère les formateurs extérieurs */
        readonly get: operations['getOutTrainerCollection'];
        /** Créer un formateur extérieur */
        readonly post: operations['postOutTrainerCollection'];
        readonly parameters: {};
    };
    readonly '/api/out-trainers/{id}': {
        /** Supprime un formateur extérieur */
        readonly delete: operations['deleteOutTrainerItem'];
        /** Modifie un formateur extérieur */
        readonly patch: operations['patchOutTrainerItem'];
        readonly parameters: {};
    };
    readonly '/api/products': {
        /** Récupère les produits */
        readonly get: operations['getProductCollection'];
        /** Créer un produit */
        readonly post: operations['postProductCollection'];
        readonly parameters: {};
    };
    readonly '/api/products/{id}': {
        /** Récupère un produit */
        readonly get: operations['getProductItem'];
        /** Supprime un produit */
        readonly delete: operations['deleteProductItem'];
        readonly parameters: {};
    };
    readonly '/api/products/{id}/clone': {
        /** Clone un produit */
        readonly post: operations['cloneProductItem'];
        readonly parameters: {};
    };
    readonly '/api/products/{id}/promote/{transition}': {
        /** Transite le produit à son prochain statut de workflow */
        readonly patch: operations['promoteProductItem'];
        readonly parameters: {};
    };
    readonly '/api/products/{id}/upgrade': {
        /** Évolue le produit au prochain indice */
        readonly post: operations['upgradeProductItem'];
        readonly parameters: {};
    };
    readonly '/api/products/{id}/{process}': {
        /** Modifie un produit */
        readonly patch: operations['patchProductItem'];
        readonly parameters: {};
    };
    readonly '/api/product-families': {
        /** Récupère les familles de produit */
        readonly get: operations['getProductFamilyCollection'];
        /** Créer une famille de produit */
        readonly post: operations['postProductFamilyCollection'];
        readonly parameters: {};
    };
    readonly '/api/product-families/{id}': {
        /** Modifie une famille de produit */
        readonly post: operations['postProductFamilyItem'];
        /** Supprime une famille de produit */
        readonly delete: operations['deleteProductFamilyItem'];
        readonly parameters: {};
    };
    readonly '/api/quality-types': {
        /** Récupère les types qualités */
        readonly get: operations['getQualityTypeCollection'];
        /** Créer un type qualité */
        readonly post: operations['postQualityTypeCollection'];
        readonly parameters: {};
    };
    readonly '/api/quality-types/{id}': {
        /** Supprime un type qualité */
        readonly delete: operations['deleteQualityTypeItem'];
        /** Modifie un type qualité */
        readonly patch: operations['patchQualityTypeItem'];
        readonly parameters: {};
    };
    readonly '/api/reject-types': {
        /** Récupère les type de rebus */
        readonly get: operations['getRejectTypeCollection'];
        /** Créer un type de rebus */
        readonly post: operations['postRejectTypeCollection'];
        readonly parameters: {};
    };
    readonly '/api/reject-types/{id}': {
        /** Supprime un type de rebus */
        readonly delete: operations['deleteRejectTypeItem'];
        /** Modifie un type de rebus */
        readonly patch: operations['patchRejectTypeItem'];
        readonly parameters: {};
    };
    readonly '/api/skill-types': {
        /** Récupère les types de compétence */
        readonly get: operations['getSkillTypeCollection'];
        /** Créer les types de compétence */
        readonly post: operations['postSkillTypeCollection'];
        readonly parameters: {};
    };
    readonly '/api/skill-types/{id}': {
        /** Supprime les types de compétence */
        readonly delete: operations['deleteSkillTypeItem'];
        /** Modifie les types de compétence */
        readonly patch: operations['patchSkillTypeItem'];
        readonly parameters: {};
    };
    readonly '/api/time-slots': {
        /** Récupère les plages horaires */
        readonly get: operations['getTimeSlotCollection'];
        /** Créer une plage horaire */
        readonly post: operations['postTimeSlotCollection'];
        readonly parameters: {};
    };
    readonly '/api/time-slots/{id}': {
        /** Supprime une plage horaire */
        readonly delete: operations['deleteTimeSlotItem'];
        /** Modifie une plage horaire */
        readonly patch: operations['patchTimeSlotItem'];
        readonly parameters: {};
    };
    readonly '/api/units': {
        /** Récupère les unités */
        readonly get: operations['getUnitCollection'];
        /** Créer une unité */
        readonly post: operations['postUnitCollection'];
        readonly parameters: {};
    };
    readonly '/api/units/{id}': {
        /** Supprime une unité */
        readonly delete: operations['deleteUnitItem'];
        /** Modifie une unité */
        readonly patch: operations['patchUnitItem'];
        readonly parameters: {};
    };
    readonly '/api/vat-messages': {
        /** Récupère les messages TVA */
        readonly get: operations['getVatMessageCollection'];
        /** Créer un message TVA */
        readonly post: operations['postVatMessageCollection'];
        readonly parameters: {};
    };
    readonly '/api/vat-messages/{id}': {
        /** Supprime un message TVA */
        readonly delete: operations['deleteVatMessageItem'];
        /** Modifie un message TVA */
        readonly patch: operations['patchVatMessageItem'];
        readonly parameters: {};
    };
}

export interface components {
    readonly schemas: {
        readonly 'Address-Carrier-read': {
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address-Carrier-write': {
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address-OutTrainer-read': {
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address-OutTrainer-write': {
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address.jsonld-Carrier-read': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address.jsonld-Carrier-write': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address.jsonld-OutTrainer-read': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        readonly 'Address.jsonld-OutTrainer-write': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             * @example 5 rue Alfred Nobel
             */
            readonly address?: unknown | null;
            /**
             * Complément d'adresse
             * @description Complément d'adresse
             * @example ZA La charrière
             */
            readonly address2?: unknown | null;
            /**
             * Ville
             * @description Ville
             * @example Rioz
             */
            readonly city?: unknown | null;
            /**
             * Pays
             * @description Pays
             * @example FR
             */
            readonly country?: unknown | null;
            /**
             * E-mail
             * Format: email
             * @description E-mail
             * @example sales@tconcept.fr
             */
            readonly email?: unknown | null;
            /**
             * Numéro de téléphone
             * @description Numéro de téléphone
             * @example 03 84 91 99 84
             */
            readonly phoneNumber?: unknown | null;
            /**
             * Code postal
             * @description Code postal
             * @example 70190
             */
            readonly zipCode?: unknown | null;
        };
        /** @description Authentification */
        readonly Auth: {
            /**
             * @description Mot de passe
             * @example super
             */
            readonly password: string;
            /**
             * @description Identifiant
             * @example super
             */
            readonly username: string;
        };
        /** @description Transporteur */
        readonly 'Carrier-Carrier-read': {
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address-Carrier-read'];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example DHL
             */
            readonly name: string;
        };
        /** @description Transporteur */
        readonly 'Carrier-Carrier-write': {
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address-Carrier-write'];
            /**
             * Nom
             * @description Nom
             * @example DHL
             */
            readonly name: string;
        };
        /** @description Transporteur */
        readonly 'Carrier.jsonld-Carrier-read': {
            /** @example /api/contexts/Carrier */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/carriers/1 */
            readonly '@id': string;
            /** @example Carrier */
            readonly '@type': string;
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address.jsonld-Carrier-read'];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example DHL
             */
            readonly name: string;
        };
        /** @description Transporteur */
        readonly 'Carrier.jsonld-Carrier-write': {
            /** @example /api/contexts/Carrier */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/carriers/1 */
            readonly '@id'?: string;
            /** @example Carrier */
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address.jsonld-Carrier-write'];
            /**
             * Nom
             * @description Nom
             * @example DHL
             */
            readonly name: string;
        };
        /** @description Couleur */
        readonly 'Color-Color-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * nom
             * @description nom
             * @example Gris
             */
            readonly name: string;
            /**
             * rgb
             * @description rgb
             * @example #848484
             */
            readonly rgb: string | null;
        };
        /** @description Couleur */
        readonly 'Color-Color-write': {
            /**
             * nom
             * @description nom
             * @example Gris
             */
            readonly name: string;
            /**
             * rgb
             * @description rgb
             * @example #848484
             */
            readonly rgb: string | null;
        };
        /** @description Couleur */
        readonly 'Color.jsonld-Color-read': {
            /** @example /api/contexts/Color */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/colors/1 */
            readonly '@id': string;
            /** @example Color */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * nom
             * @description nom
             * @example Gris
             */
            readonly name: string;
            /**
             * rgb
             * @description rgb
             * @example #848484
             */
            readonly rgb: string | null;
        };
        /** @description Couleur */
        readonly 'Color.jsonld-Color-write': {
            /** @example /api/contexts/Color */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/colors/1 */
            readonly '@id'?: string;
            /** @example Color */
            readonly '@type'?: string;
            /**
             * nom
             * @description nom
             * @example Gris
             */
            readonly name: string;
            /**
             * rgb
             * @description rgb
             * @example #848484
             */
            readonly rgb: string | null;
        };
        /** @description Famille de composant */
        readonly 'ComponentFamily-ComponentFamily-read': {
            /**
             * Code
             * @description Code
             * @example CAB
             */
            readonly code: string | null;
            /**
             * Cuivré
             * @description Cuivré
             * @example true
             */
            readonly copperable?: boolean;
            readonly customsCode?: string | null;
            /**
             * Icône
             * @description Icône
             * @example /uploads/component-families/1.jpg
             */
            readonly filepath?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Câbles
             */
            readonly name: string;
            /**
             * Famille parente
             * Format: iri-reference
             * @description Famille parente
             * @example /api/component-families/2
             */
            readonly parent?: string | null;
        };
        /** @description Famille de composant */
        readonly 'ComponentFamily-ComponentFamily-write': {
            /**
             * @description Nom
             * @example Câbles
             */
            readonly name: string;
            /**
             * Format: iri-reference
             * @description Famille parente
             * @example /api/component-families/2
             */
            readonly parent?: string | null;
            /**
             * @description Code
             * @example CAB
             */
            readonly code: string | null;
            /**
             * @description Cuivré
             * @example true
             */
            readonly copperable?: boolean;
            readonly customsCode?: string | null;
            /** Format: binary */
            readonly file?: string | null;
        };
        /** @description Famille de composant */
        readonly 'ComponentFamily.jsonld-ComponentFamily-read': {
            /** @example /api/contexts/ComponentFamily */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/component-families/1 */
            readonly '@id': string;
            /** @example ComponentFamily */
            readonly '@type': string;
            /**
             * Code
             * @description Code
             * @example CAB
             */
            readonly code: string;
            /**
             * Cuivré
             * @description Cuivré
             * @example true
             */
            readonly copperable?: boolean;
            readonly customsCode?: string | null;
            /**
             * Icône
             * @description Icône
             * @example /uploads/component-families/1.jpg
             */
            readonly filepath?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Câbles
             */
            readonly name: string;
            /**
             * Famille parente
             * Format: iri-reference
             * @description Famille parente
             * @example /api/component-families/2
             */
            readonly parent?: string | null;
        };
        /** @description Groupe de contrepartie de test */
        readonly CounterPartGroup: {
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
            readonly type?: string;
        };
        /** @description Groupe de contrepartie de test */
        readonly 'CounterPartGroup.jsonld': {
            /** @example /api/contexts/CounterPartGroup */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/counter-part-groups/1 */
            readonly '@id': string;
            /** @example CounterPartGroup */
            readonly '@type': string;
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
            readonly type?: string;
        };
        /** @description Devises */
        readonly 'Currency-Currency-read': {
            /**
             * Active
             * @description Active
             * @example true
             */
            readonly active?: boolean;
            /**
             * Enfants
             * @description Enfants
             * @example /api/currencies/2,/api/currencies/3
             */
            readonly children?: readonly string[];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Euro
             */
            readonly name: string | null;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/currencies/1
             */
            readonly parent?: string | null;
            /**
             * Symbole
             * @description Symbole
             * @example €
             */
            readonly symbol?: string | null;
        };
        /** @description Devises */
        readonly 'Currency-Currency-write': {
            /**
             * Active
             * @description Active
             * @example true
             */
            readonly active?: boolean;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/currencies/1
             */
            readonly parent?: string | null;
        };
        /** @description Devises */
        readonly 'Currency.jsonld-Currency-read': {
            readonly '@id': string;
            readonly '@type': string;
            /** @example /api/contexts/Currency */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /**
             * Active
             * @description Active
             * @example true
             */
            readonly active?: boolean;
            /**
             * Enfants
             * @description Enfants
             * @example /api/currencies/2,/api/currencies/3
             */
            readonly children?: readonly string[];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Euro
             */
            readonly name: string | null;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/currencies/1
             */
            readonly parent?: string | null;
            /**
             * Symbole
             * @description Symbole
             * @example €
             */
            readonly symbol?: string | null;
        };
        readonly 'CurrentPlace-Product-collection': {
            /** Format: date-time */
            readonly date?: string;
            /**
             * Nom
             * @description Nom
             */
            readonly name: string | null;
        };
        readonly 'CurrentPlace-Product-read': {
            /** Format: date-time */
            readonly date?: string;
            /**
             * Nom
             * @description Nom
             */
            readonly name: string | null;
        };
        readonly 'CurrentPlace.jsonld-Product-collection': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /** Format: date-time */
            readonly date?: string;
            /**
             * Nom
             * @description Nom
             */
            readonly name: string | null;
        };
        readonly 'CurrentPlace.jsonld-Product-read': {
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            readonly '@id'?: string;
            readonly '@type'?: string;
            /** Format: date-time */
            readonly date?: string;
            /**
             * Nom
             * @description Nom
             */
            readonly name: string | null;
        };
        /** @description Employé */
        readonly 'Employee-Employee-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Super
             */
            readonly name: string;
            /**
             * Rôles
             * @description Rôles
             * @example ROLE_USER
             */
            readonly roles?: readonly string[];
            /**
             * Token
             * @description Token
             * @example 47e65f14b42a5398c1eea9125aaf93e44b1ddeb93ea2cca769ea897e0a285e4e7cfac21dee1a56396e15c1c5ee7c8d4e0bf692c83cda86a6462ad707
             */
            readonly token?: string | null;
            /**
             * identifiant
             * @description identifiant
             * @example super
             */
            readonly username?: string;
        };
        /** @description Employé */
        readonly 'Employee.jsonld-Employee-read': {
            /** @example /api/contexts/Employee */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/employees/1 */
            readonly '@id': string;
            /** @example Employee */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Super
             */
            readonly name: string;
            /**
             * Rôles
             * @description Rôles
             * @example ROLE_USER
             */
            readonly roles?: readonly string[];
            /**
             * Token
             * @description Token
             * @example 47e65f14b42a5398c1eea9125aaf93e44b1ddeb93ea2cca769ea897e0a285e4e7cfac21dee1a56396e15c1c5ee7c8d4e0bf692c83cda86a6462ad707
             */
            readonly token: string;
            /**
             * identifiant
             * @description identifiant
             * @example super
             */
            readonly username?: string;
        };
        /** @description Groupe d'équipement */
        readonly 'EngineGroup-EngineGroup-read': {
            /**
             * Code
             * @description Code
             * @example TA
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Table d'assemblage
             */
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description Groupe d'équipement */
        readonly 'EngineGroup-EngineGroup-write': {
            /**
             * Code
             * @description Code
             * @example TA
             */
            readonly code: string;
            /**
             * Nom
             * @description Nom
             * @example Table d'assemblage
             */
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description Groupe d'équipement */
        readonly 'EngineGroup.jsonld-EngineGroup-read': {
            readonly '@id': string;
            readonly '@type': string;
            /** @example /api/contexts/EngineGroup */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /**
             * Code
             * @description Code
             * @example TA
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Table d'assemblage
             */
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description Type d'événements */
        readonly 'EventType-EventType-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example ABSENCE
             */
            readonly name: string;
            /**
             * Status
             * @description Status
             * @example blocked
             * @enum {string|null}
             */
            readonly toStatus?:
                | ('blocked' | 'disabled' | 'enabled' | 'warning')
                | null;
        };
        /** @description Type d'événements */
        readonly 'EventType-EventType-write': {
            /**
             * Nom
             * @description Nom
             * @example ABSENCE
             */
            readonly name: string;
            /**
             * Status
             * @description Status
             * @example blocked
             * @enum {string|null}
             */
            readonly toStatus?:
                | ('blocked' | 'disabled' | 'enabled' | 'warning')
                | null;
        };
        /** @description Type d'événements */
        readonly 'EventType.jsonld-EventType-read': {
            /** @example /api/contexts/EventType */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/event-types/1 */
            readonly '@id': string;
            /** @example EventType */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example ABSENCE
             */
            readonly name: string;
            /**
             * Status
             * @description Status
             * @example blocked
             * @enum {string|null}
             */
            readonly toStatus?:
                | ('blocked' | 'disabled' | 'enabled' | 'warning')
                | null;
        };
        /** @description Type d'événements */
        readonly 'EventType.jsonld-EventType-write': {
            /** @example /api/contexts/EventType */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/event-types/1 */
            readonly '@id'?: string;
            /** @example EventType */
            readonly '@type'?: string;
            /**
             * Nom
             * @description Nom
             * @example ABSENCE
             */
            readonly name: string;
            /**
             * Status
             * @description Status
             * @example blocked
             * @enum {string|null}
             */
            readonly toStatus?:
                | ('blocked' | 'disabled' | 'enabled' | 'warning')
                | null;
        };
        /** @description Incoterms */
        readonly 'Incoterms-Incoterms-read': {
            /**
             * Code
             * @description Code
             * @example DDP
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Delivered Duty Paid
             */
            readonly name: string;
        };
        /** @description Incoterms */
        readonly 'Incoterms-Incoterms-write': {
            /**
             * Code
             * @description Code
             * @example DDP
             */
            readonly code: string;
            /**
             * Nom
             * @description Nom
             * @example Delivered Duty Paid
             */
            readonly name: string;
        };
        /** @description Incoterms */
        readonly 'Incoterms.jsonld-Incoterms-read': {
            /** @example /api/contexts/Incoterms */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/incoterms/1 */
            readonly '@id': string;
            /** @example Incoterms */
            readonly '@type': string;
            /**
             * Code
             * @description Code
             * @example DDP
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Delivered Duty Paid
             */
            readonly name: string;
        };
        /** @description Incoterms */
        readonly 'Incoterms.jsonld-Incoterms-write': {
            /** @example /api/contexts/Incoterms */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/incoterms/1 */
            readonly '@id'?: string;
            /** @example Incoterms */
            readonly '@type'?: string;
            /**
             * Code
             * @description Code
             * @example DDP
             */
            readonly code: string;
            /**
             * Nom
             * @description Nom
             * @example Delivered Duty Paid
             */
            readonly name: string;
        };
        /** @description Délai de paiement des factures */
        readonly 'InvoiceTimeDue-InvoiceTimeDue-read': {
            /**
             * Jours
             * @description Jours
             * @example 30
             */
            readonly days?: number | null;
            /**
             * Jours après la fin du mois
             * @description Jours après la fin du mois
             */
            readonly daysAfterEndOfMonth?: number | null;
            /**
             * Fin du mois
             * @description Fin du mois
             * @example true
             */
            readonly endOfMonth?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example 30 jours fin de mois
             */
            readonly name: string;
        };
        /** @description Délai de paiement des factures */
        readonly 'InvoiceTimeDue-InvoiceTimeDue-write': {
            /**
             * Jours
             * @description Jours
             * @example 30
             */
            readonly days?: number | null;
            /**
             * Jours après la fin du mois
             * @description Jours après la fin du mois
             */
            readonly daysAfterEndOfMonth?: number | null;
            /**
             * Fin du mois
             * @description Fin du mois
             * @example true
             */
            readonly endOfMonth?: boolean;
            /**
             * Nom
             * @description Nom
             * @example 30 jours fin de mois
             */
            readonly name: string;
        };
        /** @description Délai de paiement des factures */
        readonly 'InvoiceTimeDue.jsonld-InvoiceTimeDue-read': {
            /** @example /api/contexts/InvoiceTimeDue */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/invoice-time-dues/1 */
            readonly '@id': string;
            /** @example InvoiceTimeDue */
            readonly '@type': string;
            /**
             * Jours
             * @description Jours
             * @example 30
             */
            readonly days?: number | null;
            /**
             * Jours après la fin du mois
             * @description Jours après la fin du mois
             */
            readonly daysAfterEndOfMonth?: number | null;
            /**
             * Fin du mois
             * @description Fin du mois
             * @example true
             */
            readonly endOfMonth?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example 30 jours fin de mois
             */
            readonly name: string;
        };
        /** @description Délai de paiement des factures */
        readonly 'InvoiceTimeDue.jsonld-InvoiceTimeDue-write': {
            /** @example /api/contexts/InvoiceTimeDue */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/invoice-time-dues/1 */
            readonly '@id'?: string;
            /** @example InvoiceTimeDue */
            readonly '@type'?: string;
            /**
             * Jours
             * @description Jours
             * @example 30
             */
            readonly days?: number | null;
            /**
             * Jours après la fin du mois
             * @description Jours après la fin du mois
             */
            readonly daysAfterEndOfMonth?: number | null;
            /**
             * Fin du mois
             * @description Fin du mois
             * @example true
             */
            readonly endOfMonth?: boolean;
            /**
             * Nom
             * @description Nom
             * @example 30 jours fin de mois
             */
            readonly name: string;
        };
        /** @description Temps */
        readonly 'Measure-duration': {
            /**
             * @description Code
             * @default s
             * @example s
             */
            readonly code?: string;
            /**
             * @description Valeur
             * @example 1
             */
            readonly value?: number;
        };
        /** @description Masse */
        readonly 'Measure-mass': {
            /**
             * @description Code
             * @default kg
             * @example kg
             */
            readonly code?: string;
            /**
             * @description Valeur
             * @example 1
             */
            readonly value?: number;
        };
        /** @description Prix */
        readonly 'Measure-price': {
            /**
             * @description Code
             * @default €
             * @example €
             */
            readonly code?: string;
            /**
             * @description Valeur
             * @example 1
             */
            readonly value?: number;
        };
        /** @description Unitaire */
        readonly 'Measure-unitary': {
            /**
             * @description Code
             * @default U
             * @example U
             */
            readonly code?: string;
            /**
             * @description Valeur
             * @example 1
             */
            readonly value?: number;
        };
        /** @description Formateur extérieur */
        readonly 'OutTrainer-OutTrainer-read': {
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address-OutTrainer-read'];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Prénom
             * @description Prénom
             * @example Rawaa
             */
            readonly name: string;
            /**
             * Nom
             * @description Nom
             * @example CHRAIET
             */
            readonly surname: string;
        };
        /** @description Formateur extérieur */
        readonly 'OutTrainer-OutTrainer-write': {
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address-OutTrainer-write'];
            /**
             * Prénom
             * @description Prénom
             * @example Rawaa
             */
            readonly name: string;
            /**
             * Nom
             * @description Nom
             * @example CHRAIET
             */
            readonly surname: string;
        };
        /** @description Formateur extérieur */
        readonly 'OutTrainer.jsonld-OutTrainer-read': {
            /** @example /api/contexts/OutTrainer */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/out-trainers/1 */
            readonly '@id': string;
            /** @example OutTrainer */
            readonly '@type': string;
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address.jsonld-OutTrainer-read'];
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Prénom
             * @description Prénom
             * @example Rawaa
             */
            readonly name: string;
            /**
             * Nom
             * @description Nom
             * @example CHRAIET
             */
            readonly surname: string;
        };
        /** @description Formateur extérieur */
        readonly 'OutTrainer.jsonld-OutTrainer-write': {
            /** @example /api/contexts/OutTrainer */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/out-trainers/1 */
            readonly '@id'?: string;
            /** @example OutTrainer */
            readonly '@type'?: string;
            /**
             * Adresse
             * @description Adresse
             */
            readonly address?: components['schemas']['Address.jsonld-OutTrainer-write'];
            /**
             * Prénom
             * @description Prénom
             * @example Rawaa
             */
            readonly name: string;
            /**
             * Nom
             * @description Nom
             * @example CHRAIET
             */
            readonly surname: string;
        };
        /** @description Produit */
        readonly 'Product-Product-clone': {
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product-Product-collection': {
            /** @description Statut */
            readonly currentPlace?: components['schemas']['CurrentPlace-Product-collection'];
            /**
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product-Product-create': {
            /**
             * Date d'expiration
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Famille de produit
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * Volume prévisionnel
             * @description Volume prévisionnel
             */
            readonly forecastVolume?: components['schemas']['Measure-unitary'];
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Type
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * Nom
             * @description Nom
             * @example HEATING WIRE (HSR25304)
             */
            readonly name: string;
            /**
             * Notes
             * @description Notes
             * @example Produit préféré des clients
             */
            readonly notes?: string | null;
            /**
             * Conditionnement
             * @description Conditionnement
             */
            readonly packaging: components['schemas']['Measure-unitary'];
            /**
             * Notes
             * @description Notes
             * @example Type de packaging
             */
            readonly packagingKind?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
            /**
             * Unité
             * Format: iri-reference
             * @description Unité
             * @example /api/units/1
             */
            readonly unit: string;
        };
        /** @description Produit */
        readonly 'Product-Product-read': {
            /**
             * Statut
             * @description Statut
             */
            readonly currentPlace?: components['schemas']['CurrentPlace-Product-read'];
            /**
             * Code douanier
             * @description Code douanier
             * @example 8544300089
             */
            readonly customsCode?: string | null;
            /**
             * Date d'expiration
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Famille de produit
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * Volume prévisionnel
             * @description Volume prévisionnel
             */
            readonly forecastVolume?: components['schemas']['Measure-unitary'];
            /**
             * Incoterms
             * Format: iri-reference
             * @description Incoterms
             * @example /api/incoterms/1
             */
            readonly incoterms: string | null;
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Indice interne
             * @description Indice interne
             * @default 1
             * @example 1
             */
            readonly internalIndex: number;
            /**
             * Type
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * Gestion cuivre
             * @description Gestion cuivre
             * @example true
             */
            readonly managedCopper?: boolean;
            /**
             * Nombre max de prototypes
             * @description Nombre max de prototypes
             */
            readonly maxProto: components['schemas']['Measure-unitary'];
            /**
             * Délai de livraison minimum
             * @description Délai de livraison minimum
             */
            readonly minDelivery: components['schemas']['Measure-unitary'];
            /**
             * Production minimum
             * @description Production minimum
             */
            readonly minProd: components['schemas']['Measure-unitary'];
            /**
             * Stock minimum
             * @description Stock minimum
             */
            readonly minStock: components['schemas']['Measure-unitary'];
            /**
             * Nom
             * @description Nom
             * @example HEATING WIRE (HSR25304)
             */
            readonly name: string;
            /**
             * Notes
             * @description Notes
             * @example Produit préféré des clients
             */
            readonly notes?: string | null;
            /**
             * Conditionnement
             * @description Conditionnement
             */
            readonly packaging: components['schemas']['Measure-unitary'];
            /**
             * Notes
             * @description Notes
             * @example Type de packaging
             */
            readonly packagingKind?: string;
            /**
             * Unité parente
             * Format: iri-reference
             * @description Unité parente
             * @example /api/products/3
             */
            readonly parent?: string | null;
            /**
             * Prix
             * @description Prix
             */
            readonly price: components['schemas']['Measure-price'];
            /**
             * Prix sans cuivre
             * @description Prix sans cuivre
             */
            readonly priceWithoutCopper: components['schemas']['Measure-price'];
            /**
             * Délai de production
             * @description Délai de production
             */
            readonly productionDelay: components['schemas']['Measure-duration'];
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
            /**
             * Prix de cession des composants
             * @description Prix de cession des composants
             */
            readonly transfertPriceSupplies: components['schemas']['Measure-price'];
            /**
             * Prix de cession de main d'œuvre
             * @description Prix de cession de main d'œuvre
             */
            readonly transfertPriceWork: components['schemas']['Measure-price'];
            /**
             * Unité
             * Format: iri-reference
             * @description Unité
             * @example /api/units/1
             */
            readonly unit: string;
            /**
             * Poids
             * @description Poids
             */
            readonly weight?: components['schemas']['Measure-mass'];
        };
        /** @description Produit */
        readonly 'Product-Product-upgrade': {
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product-Product-write': {
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Type
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * Nom
             * @description Nom
             * @example HEATING WIRE (HSR25304)
             */
            readonly name: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product.jsonld-Product-clone': {
            /** @example /api/contexts/Product */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/products/1 */
            readonly '@id'?: string;
            /** @example Product */
            readonly '@type'?: string;
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product.jsonld-Product-collection': {
            readonly '@id'?: string;
            readonly '@type'?: string;
            /** @description Statut */
            readonly currentPlace?: components['schemas']['CurrentPlace.jsonld-Product-collection'];
            /**
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Produit */
        readonly 'Product.jsonld-Product-create': {
            /** @example /api/contexts/Product */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/products/1 */
            readonly '@id'?: string;
            /** @example Product */
            readonly '@type'?: string;
            /**
             * Date d'expiration
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Famille de produit
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * Volume prévisionnel
             * @description Volume prévisionnel
             */
            readonly forecastVolume?: components['schemas']['Measure-unitary'];
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Type
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * Nom
             * @description Nom
             * @example HEATING WIRE (HSR25304)
             */
            readonly name: string;
            /**
             * Notes
             * @description Notes
             * @example Produit préféré des clients
             */
            readonly notes?: string | null;
            /**
             * Conditionnement
             * @description Conditionnement
             */
            readonly packaging: components['schemas']['Measure-unitary'];
            /**
             * Notes
             * @description Notes
             * @example Type de packaging
             */
            readonly packagingKind?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
            /**
             * Unité
             * Format: iri-reference
             * @description Unité
             * @example /api/units/1
             */
            readonly unit: string;
        };
        /** @description Produit */
        readonly 'Product.jsonld-Product-read': {
            /** @example /api/contexts/Product */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/products/1 */
            readonly '@id': string;
            /** @example Product */
            readonly '@type': string;
            /**
             * Statut
             * @description Statut
             */
            readonly currentPlace?: components['schemas']['CurrentPlace.jsonld-Product-read'];
            /**
             * Code douanier
             * @description Code douanier
             * @example 8544300089
             */
            readonly customsCode?: string | null;
            /**
             * Date d'expiration
             * Format: date-time
             * @description Date d'expiration
             * @example 2021-01-12
             */
            readonly expirationDate?: string | null;
            /**
             * Famille de produit
             * Format: iri-reference
             * @description Famille de produit
             * @example /api/product-families/1
             */
            readonly family?: string;
            /**
             * Volume prévisionnel
             * @description Volume prévisionnel
             */
            readonly forecastVolume?: components['schemas']['Measure-unitary'];
            /**
             * Incoterms
             * Format: iri-reference
             * @description Incoterms
             * @example /api/incoterms/1
             */
            readonly incoterms: string;
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Indice interne
             * @description Indice interne
             * @default 1
             * @example 1
             */
            readonly internalIndex: number;
            /**
             * Type
             * @description Type
             * @default Prototype
             * @example Prototype
             * @enum {string|null}
             */
            readonly kind?:
                | ('EI' | 'Prototype' | 'Série' | 'Pièce de rechange')
                | null;
            /**
             * Gestion cuivre
             * @description Gestion cuivre
             * @example true
             */
            readonly managedCopper?: boolean;
            /**
             * Nombre max de prototypes
             * @description Nombre max de prototypes
             */
            readonly maxProto: components['schemas']['Measure-unitary'];
            /**
             * Délai de livraison minimum
             * @description Délai de livraison minimum
             */
            readonly minDelivery: components['schemas']['Measure-unitary'];
            /**
             * Production minimum
             * @description Production minimum
             */
            readonly minProd: components['schemas']['Measure-unitary'];
            /**
             * Stock minimum
             * @description Stock minimum
             */
            readonly minStock: components['schemas']['Measure-unitary'];
            /**
             * Nom
             * @description Nom
             * @example HEATING WIRE (HSR25304)
             */
            readonly name: string;
            /**
             * Notes
             * @description Notes
             * @example Produit préféré des clients
             */
            readonly notes?: string | null;
            /**
             * Conditionnement
             * @description Conditionnement
             */
            readonly packaging: components['schemas']['Measure-unitary'];
            /**
             * Notes
             * @description Notes
             * @example Type de packaging
             */
            readonly packagingKind?: string;
            /**
             * Unité parente
             * Format: iri-reference
             * @description Unité parente
             * @example /api/products/3
             */
            readonly parent?: string | null;
            /**
             * Prix
             * @description Prix
             */
            readonly price: components['schemas']['Measure-price'];
            /**
             * Prix sans cuivre
             * @description Prix sans cuivre
             */
            readonly priceWithoutCopper: components['schemas']['Measure-price'];
            /**
             * Délai de production
             * @description Délai de production
             */
            readonly productionDelay: components['schemas']['Measure-duration'];
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
            /**
             * Prix de cession des composants
             * @description Prix de cession des composants
             */
            readonly transfertPriceSupplies: components['schemas']['Measure-price'];
            /**
             * Prix de cession de main d'œuvre
             * @description Prix de cession de main d'œuvre
             */
            readonly transfertPriceWork: components['schemas']['Measure-price'];
            /**
             * Unité
             * Format: iri-reference
             * @description Unité
             * @example /api/units/1
             */
            readonly unit: string;
            /**
             * Poids
             * @description Poids
             */
            readonly weight?: components['schemas']['Measure-mass'];
        };
        /** @description Produit */
        readonly 'Product.jsonld-Product-upgrade': {
            /** @example /api/contexts/Product */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/products/1 */
            readonly '@id'?: string;
            /** @example Product */
            readonly '@type'?: string;
            /**
             * Indice
             * @description Indice
             * @example 02
             */
            readonly index?: string;
            /**
             * Référence
             * @description Référence
             * @example 54587F
             */
            readonly ref?: string;
        };
        /** @description Famille de produit */
        readonly 'ProductFamily-ProductFamily-read': {
            readonly customsCode?: string | null;
            /**
             * Icône
             * @description Icône
             * @example /uploads/product-families/1.jpg
             */
            readonly filepath?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Faisceaux
             */
            readonly name: string;
            /**
             * Famille parente
             * Format: iri-reference
             * @description Famille parente
             * @example /api/product-families/1
             */
            readonly parent?: string | null;
        };
        /** @description Famille de produit */
        readonly 'ProductFamily-ProductFamily-write': {
            /**
             * @description Nom
             * @example Faisceaux
             */
            readonly name: string;
            /**
             * Format: iri-reference
             * @description Famille parente
             * @example /api/product-families/1
             */
            readonly parent?: string | null;
            readonly customsCode?: string | null;
            /** Format: binary */
            readonly file?: string | null;
        };
        /** @description Famille de produit */
        readonly 'ProductFamily.jsonld-ProductFamily-read': {
            /** @example /api/contexts/ProductFamily */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/product-families/1 */
            readonly '@id': string;
            /** @example ProductFamily */
            readonly '@type': string;
            readonly customsCode?: string | null;
            /**
             * Icône
             * @description Icône
             * @example /uploads/product-families/1.jpg
             */
            readonly filepath?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Faisceaux
             */
            readonly name: string;
            /**
             * Famille parente
             * Format: iri-reference
             * @description Famille parente
             * @example /api/product-families/1
             */
            readonly parent?: string | null;
        };
        /** @description Type qualité */
        readonly 'QualityType-QualityType-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Dimensions
             */
            readonly name: string;
        };
        /** @description Type qualité */
        readonly 'QualityType-QualityType-write': {
            /**
             * Nom
             * @description Nom
             * @example Dimensions
             */
            readonly name: string;
        };
        /** @description Type qualité */
        readonly 'QualityType.jsonld-QualityType-read': {
            /** @example /api/contexts/QualityType */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/quality-types/1 */
            readonly '@id': string;
            /** @example QualityType */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Dimensions
             */
            readonly name: string;
        };
        /** @description Type qualité */
        readonly 'QualityType.jsonld-QualityType-write': {
            /** @example /api/contexts/QualityType */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/quality-types/1 */
            readonly '@id'?: string;
            /** @example QualityType */
            readonly '@type'?: string;
            /**
             * Nom
             * @description Nom
             * @example Dimensions
             */
            readonly name: string;
        };
        /** @description Type de rebus */
        readonly 'RejectType-RejectType-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example sertissage dimensionnelle
             */
            readonly name: string;
        };
        /** @description Type de rebus */
        readonly 'RejectType-RejectType-write': {
            /**
             * Nom
             * @description Nom
             * @example sertissage dimensionnelle
             */
            readonly name: string;
        };
        /** @description Type de rebus */
        readonly 'RejectType.jsonld-RejectType-read': {
            /** @example /api/contexts/RejectType */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/reject-types/1 */
            readonly '@id': string;
            /** @example RejectType */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example sertissage dimensionnelle
             */
            readonly name: string;
        };
        /** @description Type de rebus */
        readonly 'RejectType.jsonld-RejectType-write': {
            /** @example /api/contexts/RejectType */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/reject-types/1 */
            readonly '@id'?: string;
            /** @example RejectType */
            readonly '@type'?: string;
            /**
             * Nom
             * @description Nom
             * @example sertissage dimensionnelle
             */
            readonly name: string;
        };
        /** @description Type de compétence */
        readonly 'SkillType-SkillType-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Assemblage
             */
            readonly name: string;
        };
        /** @description Type de compétence */
        readonly 'SkillType-SkillType-write': {
            /**
             * Nom
             * @description Nom
             * @example Assemblage
             */
            readonly name: string;
        };
        /** @description Type de compétence */
        readonly 'SkillType.jsonld-SkillType-read': {
            /** @example /api/contexts/SkillType */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/skill-types/1 */
            readonly '@id': string;
            /** @example SkillType */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Assemblage
             */
            readonly name: string;
        };
        /** @description Type de compétence */
        readonly 'SkillType.jsonld-SkillType-write': {
            /** @example /api/contexts/SkillType */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/skill-types/1 */
            readonly '@id'?: string;
            /** @example SkillType */
            readonly '@type'?: string;
            /**
             * Nom
             * @description Nom
             * @example Assemblage
             */
            readonly name: string;
        };
        /** @description Plages horaires */
        readonly 'TimeSlot-TimeSlot-read': {
            /**
             * Fin
             * Format: date-time
             * @description Fin
             * @example 17:30:00
             */
            readonly end?: string;
            /**
             * Fin pause
             * Format: date-time
             * @description Fin pause
             * @example 13:30:00
             */
            readonly endBreak?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Journée
             */
            readonly name: string;
            /**
             * Début
             * Format: date-time
             * @description Début
             * @example 07:30:00
             */
            readonly start?: string;
            /**
             * Début pause
             * Format: date-time
             * @description Début pause
             * @example 12:30:00
             */
            readonly startBreak?: string | null;
        };
        /** @description Plages horaires */
        readonly 'TimeSlot-TimeSlot-write': {
            /**
             * Fin
             * Format: date-time
             * @description Fin
             * @example 17:30:00
             */
            readonly end?: string;
            /**
             * Fin pause
             * Format: date-time
             * @description Fin pause
             * @example 13:30:00
             */
            readonly endBreak?: string | null;
            /**
             * Nom
             * @description Nom
             * @example Journée
             */
            readonly name: string;
            /**
             * Début
             * Format: date-time
             * @description Début
             * @example 07:30:00
             */
            readonly start?: string;
            /**
             * Début pause
             * Format: date-time
             * @description Début pause
             * @example 12:30:00
             */
            readonly startBreak?: string | null;
        };
        /** @description Plages horaires */
        readonly 'TimeSlot.jsonld-TimeSlot-read': {
            /** @example /api/contexts/TimeSlot */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/time-slots/1 */
            readonly '@id': string;
            /** @example TimeSlot */
            readonly '@type': string;
            /**
             * Fin
             * Format: date-time
             * @description Fin
             * @example 17:30:00
             */
            readonly end?: string;
            /**
             * Fin pause
             * Format: date-time
             * @description Fin pause
             * @example 13:30:00
             */
            readonly endBreak?: string | null;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Journée
             */
            readonly name: string;
            /**
             * Début
             * Format: date-time
             * @description Début
             * @example 07:30:00
             */
            readonly start?: string;
            /**
             * Début pause
             * Format: date-time
             * @description Début pause
             * @example 12:30:00
             */
            readonly startBreak?: string | null;
        };
        /** @description Plages horaires */
        readonly 'TimeSlot.jsonld-TimeSlot-write': {
            /** @example /api/contexts/TimeSlot */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/time-slots/1 */
            readonly '@id'?: string;
            /** @example TimeSlot */
            readonly '@type'?: string;
            /**
             * Fin
             * Format: date-time
             * @description Fin
             * @example 17:30:00
             */
            readonly end?: string;
            /**
             * Fin pause
             * Format: date-time
             * @description Fin pause
             * @example 13:30:00
             */
            readonly endBreak?: string | null;
            /**
             * Nom
             * @description Nom
             * @example Journée
             */
            readonly name: string;
            /**
             * Début
             * Format: date-time
             * @description Début
             * @example 07:30:00
             */
            readonly start?: string;
            /**
             * Début pause
             * Format: date-time
             * @description Début pause
             * @example 12:30:00
             */
            readonly startBreak?: string | null;
        };
        /** @description Groupe d'outil */
        readonly ToolGroup: {
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description Groupe d'outil */
        readonly 'ToolGroup.jsonld': {
            /** @example /api/contexts/ToolGroup */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/tool-groups/1 */
            readonly '@id': string;
            /** @example ToolGroup */
            readonly '@type': string;
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description Unit */
        readonly 'Unit-Unit-read': {
            /**
             * @default 1
             * @example 1
             */
            readonly base: number;
            /**
             * Enfants
             * @description Enfants
             * @example /api/units/2,/api/units/3
             */
            readonly children?: readonly string[];
            /**
             * Code
             * @description Code
             * @example g
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Nom
             * @description Nom
             * @example Gramme
             */
            readonly name: string;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/units/1
             */
            readonly parent?: string | null;
        };
        /** @description Unit */
        readonly 'Unit-Unit-write': {
            /**
             * @default 1
             * @example 1
             */
            readonly base: number;
            /**
             * Code
             * @description Code
             * @example g
             */
            readonly code: string;
            /**
             * Nom
             * @description Nom
             * @example Gramme
             */
            readonly name: string;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/units/1
             */
            readonly parent?: string | null;
        };
        /** @description Unit */
        readonly 'Unit.jsonld-Unit-read': {
            /** @example /api/contexts/Unit */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/units/1 */
            readonly '@id': string;
            /** @example Unit */
            readonly '@type': string;
            /**
             * @default 1
             * @example 1
             */
            readonly base: number;
            /**
             * Enfants
             * @description Enfants
             * @example /api/units/2,/api/units/3
             */
            readonly children?: readonly string[];
            /**
             * Code
             * @description Code
             * @example g
             */
            readonly code: string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Nom
             * @description Nom
             * @example Gramme
             */
            readonly name: string;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/units/1
             */
            readonly parent?: string | null;
        };
        /** @description Unit */
        readonly 'Unit.jsonld-Unit-write': {
            /** @example /api/contexts/Unit */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/units/1 */
            readonly '@id'?: string;
            /** @example Unit */
            readonly '@type'?: string;
            /**
             * @default 1
             * @example 1
             */
            readonly base: number;
            /**
             * Code
             * @description Code
             * @example g
             */
            readonly code: string;
            /**
             * Nom
             * @description Nom
             * @example Gramme
             */
            readonly name: string;
            /**
             * Parent
             * Format: iri-reference
             * @description Parent
             * @example /api/units/1
             */
            readonly parent?: string | null;
        };
        /** @description Message TVA */
        readonly 'VatMessage-VatMessage-read': {
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            /**
             * Message
             * @description Message
             * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
             */
            readonly name: string;
        };
        /** @description Message TVA */
        readonly 'VatMessage-VatMessage-write': {
            /**
             * Message
             * @description Message
             * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
             */
            readonly name: string;
        };
        /** @description Message TVA */
        readonly 'VatMessage.jsonld-VatMessage-read': {
            /** @example /api/contexts/VatMessage */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/vat-messages/1 */
            readonly '@id': string;
            /** @example VatMessage */
            readonly '@type': string;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            /**
             * Message
             * @description Message
             * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
             */
            readonly name: string;
        };
        /** @description Message TVA */
        readonly 'VatMessage.jsonld-VatMessage-write': {
            /** @example /api/contexts/VatMessage */
            readonly '@context'?:
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/vat-messages/1 */
            readonly '@id'?: string;
            /** @example VatMessage */
            readonly '@type'?: string;
            /**
             * Message
             * @description Message
             * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
             */
            readonly name: string;
        };
        readonly Violation: {
            /** @example c1051bb4-d103-4f74-8988-acbcafc7fdc3 */
            readonly code: string;
            /** @example This value should not be blank. */
            readonly message: string;
            /** @example name */
            readonly propertyPath: string;
        };
        readonly Violations: {
            /** @example /api/contexts/ConstraintViolationList */
            readonly '@context'?: string;
            /** @example ConstraintViolationList */
            readonly '@type'?: string;
            /** @example An error occurred */
            readonly 'hydra:title'?: string;
            /**
             * @example name: This value should not be blank.
             * name: This value should not be blank.
             */
            readonly 'hydra:description'?: string;
            readonly violations: readonly components['schemas']['Violation'][];
        };
        /** @description WorkstationGroup */
        readonly WorkstationGroup: {
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id?: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
        /** @description WorkstationGroup */
        readonly 'WorkstationGroup.jsonld': {
            /** @example /api/contexts/WorkstationGroup */
            readonly '@context':
                | string
                | ({
                readonly '@vocab': string;
                /** @enum {string} */
                readonly hydra: 'http://www.w3.org/ns/hydra/core#';
            } & { readonly [key: string]: unknown });
            /** @example /api/workstation-groups/1 */
            readonly '@id': string;
            /** @example WorkstationGroup */
            readonly '@type': string;
            readonly code: string;
            readonly deleted?: boolean;
            /**
             * id
             * @description id
             * @example 1
             */
            readonly id: number;
            readonly name: string;
            readonly safetyDevice?: boolean;
        };
    };
}

export interface operations {
    /** Connexion */
    readonly login: {
        readonly parameters: {};
        readonly responses: {
            /** Utilisateur connecté */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Employee.jsonld-Employee-read'];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** Identifiants */
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['Auth'];
            };
        };
    };
    /** Déconnexion */
    readonly logout: {
        readonly parameters: {};
        readonly responses: {
            /** Déconnexion réussie */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Récupère les transporteurs */
    readonly getCarrierCollection: {
        readonly parameters: {
            readonly query: {
                readonly 'address.address'?: string;
                readonly 'address.address2'?: string;
                readonly 'address.city'?: string;
                readonly 'address.country'?: string;
                readonly 'address.email'?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** Carrier collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Carrier.jsonld-Carrier-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Carrier-Carrier-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Carrier-Carrier-read'][];
                    readonly 'text/html': readonly components['schemas']['Carrier-Carrier-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un transporteur */
    readonly postCarrierCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Carrier resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Carrier.jsonld-Carrier-read'];
                    readonly 'application/json': components['schemas']['Carrier-Carrier-read'];
                    readonly 'multipart/form-data': components['schemas']['Carrier-Carrier-read'];
                    readonly 'text/html': components['schemas']['Carrier-Carrier-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Carrier resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Carrier.jsonld-Carrier-write'];
                readonly 'application/json': components['schemas']['Carrier-Carrier-write'];
                readonly 'multipart/form-data': components['schemas']['Carrier-Carrier-write'];
                readonly 'text/html': components['schemas']['Carrier-Carrier-write'];
            };
        };
    };
    /** Supprime un transporteur */
    readonly deleteCarrierItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Carrier resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un transporteur */
    readonly patchCarrierItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Carrier resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Carrier.jsonld-Carrier-read'];
                    readonly 'application/json': components['schemas']['Carrier-Carrier-read'];
                    readonly 'multipart/form-data': components['schemas']['Carrier-Carrier-read'];
                    readonly 'text/html': components['schemas']['Carrier-Carrier-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Carrier resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Carrier-Carrier-write'];
            };
        };
    };
    /** Récupère les couleurs */
    readonly getColorCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
                readonly rgb?: string;
            };
        };
        readonly responses: {
            /** Color collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Color.jsonld-Color-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Color-Color-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Color-Color-read'][];
                    readonly 'text/html': readonly components['schemas']['Color-Color-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer une couleur */
    readonly postColorCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Color resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Color.jsonld-Color-read'];
                    readonly 'application/json': components['schemas']['Color-Color-read'];
                    readonly 'multipart/form-data': components['schemas']['Color-Color-read'];
                    readonly 'text/html': components['schemas']['Color-Color-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Color resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Color.jsonld-Color-write'];
                readonly 'application/json': components['schemas']['Color-Color-write'];
                readonly 'multipart/form-data': components['schemas']['Color-Color-write'];
                readonly 'text/html': components['schemas']['Color-Color-write'];
            };
        };
    };
    /** Supprime une couleur */
    readonly deleteColorItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Color resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie une couleur */
    readonly patchColorItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Color resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Color.jsonld-Color-read'];
                    readonly 'application/json': components['schemas']['Color-Color-read'];
                    readonly 'multipart/form-data': components['schemas']['Color-Color-read'];
                    readonly 'text/html': components['schemas']['Color-Color-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Color resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Color-Color-write'];
            };
        };
    };
    /** Récupère les familles de composant */
    readonly getComponentFamilyCollection: {
        readonly parameters: {
            readonly query: {
                readonly code?: string;
                readonly copperable?: boolean;
                readonly customsCode?: string;
                readonly name?: string;
                readonly parent?: number;
            };
        };
        readonly responses: {
            /** ComponentFamily collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['ComponentFamily.jsonld-ComponentFamily-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['ComponentFamily-ComponentFamily-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['ComponentFamily-ComponentFamily-read'][];
                    readonly 'text/html': readonly components['schemas']['ComponentFamily-ComponentFamily-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer une famille de composant */
    readonly postComponentFamilyCollection: {
        readonly parameters: {};
        readonly responses: {
            /** ComponentFamily resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['ComponentFamily.jsonld-ComponentFamily-read'];
                    readonly 'application/json': components['schemas']['ComponentFamily-ComponentFamily-read'];
                    readonly 'multipart/form-data': components['schemas']['ComponentFamily-ComponentFamily-read'];
                    readonly 'text/html': components['schemas']['ComponentFamily-ComponentFamily-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new ComponentFamily resource */
        readonly requestBody: {
            readonly content: {
                readonly 'multipart/form-data': components['schemas']['ComponentFamily-ComponentFamily-write'];
            };
        };
    };
    /** Modifie une famille de composant */
    readonly postComponentFamilyItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** ComponentFamily resource created */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['ComponentFamily.jsonld-ComponentFamily-read'];
                    readonly 'application/json': components['schemas']['ComponentFamily-ComponentFamily-read'];
                    readonly 'multipart/form-data': components['schemas']['ComponentFamily-ComponentFamily-read'];
                    readonly 'text/html': components['schemas']['ComponentFamily-ComponentFamily-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new ComponentFamily resource */
        readonly requestBody: {
            readonly content: {
                readonly 'multipart/form-data': components['schemas']['ComponentFamily-ComponentFamily-write'];
            };
        };
    };
    /** Supprime une famille de composant */
    readonly deleteComponentFamilyItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** ComponentFamily resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Récupère les devises */
    readonly getCurrencyCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Currency collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Currency.jsonld-Currency-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Currency-Currency-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Currency-Currency-read'][];
                    readonly 'text/html': readonly components['schemas']['Currency-Currency-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie une devise */
    readonly patchCurrencyItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Currency resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Currency.jsonld-Currency-read'];
                    readonly 'application/json': components['schemas']['Currency-Currency-read'];
                    readonly 'multipart/form-data': components['schemas']['Currency-Currency-read'];
                    readonly 'text/html': components['schemas']['Currency-Currency-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Currency resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Currency-Currency-write'];
            };
        };
    };
    /** Récupère un employé */
    readonly getEmployeeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Employee resource */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Employee.jsonld-Employee-read'];
                    readonly 'application/json': components['schemas']['Employee-Employee-read'];
                    readonly 'multipart/form-data': components['schemas']['Employee-Employee-read'];
                    readonly 'text/html': components['schemas']['Employee-Employee-read'];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** créer un groupe de contrepartie de test */
    readonly postCounterPartGroupCollection: {
        readonly parameters: {};
        readonly responses: {
            /** CounterPartGroup resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['CounterPartGroup.jsonld'];
                    readonly 'application/json': components['schemas']['CounterPartGroup'];
                    readonly 'multipart/form-data': components['schemas']['CounterPartGroup'];
                    readonly 'text/html': components['schemas']['CounterPartGroup'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new CounterPartGroup resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['CounterPartGroup.jsonld'];
                readonly 'application/json': components['schemas']['CounterPartGroup'];
                readonly 'multipart/form-data': components['schemas']['CounterPartGroup'];
                readonly 'text/html': components['schemas']['CounterPartGroup'];
            };
        };
    };
    /** Récupère les groupes d'équipement */
    readonly getEngineGroupCollection: {
        readonly parameters: {
            readonly query: {
                readonly code?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
                readonly safetyDevice?: boolean;
            };
        };
        readonly responses: {
            /** EngineGroup collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['EngineGroup.jsonld-EngineGroup-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['EngineGroup-EngineGroup-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['EngineGroup-EngineGroup-read'][];
                    readonly 'text/html': readonly components['schemas']['EngineGroup-EngineGroup-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Supprime un groupe d'équipement */
    readonly deleteEngineGroupItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** EngineGroup resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un groupe d'équipement */
    readonly patchEngineGroupItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** EngineGroup resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['EngineGroup.jsonld-EngineGroup-read'];
                    readonly 'application/json': components['schemas']['EngineGroup-EngineGroup-read'];
                    readonly 'multipart/form-data': components['schemas']['EngineGroup-EngineGroup-read'];
                    readonly 'text/html': components['schemas']['EngineGroup-EngineGroup-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated EngineGroup resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['EngineGroup-EngineGroup-write'];
            };
        };
    };
    /** Créer un groupe d'outil */
    readonly postToolGroupCollection: {
        readonly parameters: {};
        readonly responses: {
            /** ToolGroup resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['ToolGroup.jsonld'];
                    readonly 'application/json': components['schemas']['ToolGroup'];
                    readonly 'multipart/form-data': components['schemas']['ToolGroup'];
                    readonly 'text/html': components['schemas']['ToolGroup'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new ToolGroup resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['ToolGroup.jsonld'];
                readonly 'application/json': components['schemas']['ToolGroup'];
                readonly 'multipart/form-data': components['schemas']['ToolGroup'];
                readonly 'text/html': components['schemas']['ToolGroup'];
            };
        };
    };
    /** Créer un groupe de poste de travail */
    readonly postWorkstationGroupCollection: {
        readonly parameters: {};
        readonly responses: {
            /** WorkstationGroup resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['WorkstationGroup.jsonld'];
                    readonly 'application/json': components['schemas']['WorkstationGroup'];
                    readonly 'multipart/form-data': components['schemas']['WorkstationGroup'];
                    readonly 'text/html': components['schemas']['WorkstationGroup'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new WorkstationGroup resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['WorkstationGroup.jsonld'];
                readonly 'application/json': components['schemas']['WorkstationGroup'];
                readonly 'multipart/form-data': components['schemas']['WorkstationGroup'];
                readonly 'text/html': components['schemas']['WorkstationGroup'];
            };
        };
    };
    /** Récupère les types d'événements */
    readonly getEventTypeCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
                readonly toStatus?: 'blocked' | 'disabled' | 'enabled' | 'warning';
            };
        };
        readonly responses: {
            /** EventType collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['EventType.jsonld-EventType-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['EventType-EventType-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['EventType-EventType-read'][];
                    readonly 'text/html': readonly components['schemas']['EventType-EventType-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un type d'événements */
    readonly postEventTypeCollection: {
        readonly parameters: {};
        readonly responses: {
            /** EventType resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['EventType.jsonld-EventType-read'];
                    readonly 'application/json': components['schemas']['EventType-EventType-read'];
                    readonly 'multipart/form-data': components['schemas']['EventType-EventType-read'];
                    readonly 'text/html': components['schemas']['EventType-EventType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new EventType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['EventType.jsonld-EventType-write'];
                readonly 'application/json': components['schemas']['EventType-EventType-write'];
                readonly 'multipart/form-data': components['schemas']['EventType-EventType-write'];
                readonly 'text/html': components['schemas']['EventType-EventType-write'];
            };
        };
    };
    /** Supprime un type d'événements */
    readonly deleteEventTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** EventType resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un type d'événements */
    readonly patchEventTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** EventType resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['EventType.jsonld-EventType-read'];
                    readonly 'application/json': components['schemas']['EventType-EventType-read'];
                    readonly 'multipart/form-data': components['schemas']['EventType-EventType-read'];
                    readonly 'text/html': components['schemas']['EventType-EventType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated EventType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['EventType-EventType-write'];
            };
        };
    };
    /** Récupère les incoterms */
    readonly getIncotermsCollection: {
        readonly parameters: {
            readonly query: {
                readonly code?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** Incoterms collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Incoterms.jsonld-Incoterms-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Incoterms-Incoterms-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Incoterms-Incoterms-read'][];
                    readonly 'text/html': readonly components['schemas']['Incoterms-Incoterms-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un incoterms */
    readonly postIncotermsCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Incoterms resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Incoterms.jsonld-Incoterms-read'];
                    readonly 'application/json': components['schemas']['Incoterms-Incoterms-read'];
                    readonly 'multipart/form-data': components['schemas']['Incoterms-Incoterms-read'];
                    readonly 'text/html': components['schemas']['Incoterms-Incoterms-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Incoterms resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Incoterms.jsonld-Incoterms-write'];
                readonly 'application/json': components['schemas']['Incoterms-Incoterms-write'];
                readonly 'multipart/form-data': components['schemas']['Incoterms-Incoterms-write'];
                readonly 'text/html': components['schemas']['Incoterms-Incoterms-write'];
            };
        };
    };
    /** Supprime un incoterms */
    readonly deleteIncotermsItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Incoterms resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un incoterms */
    readonly patchIncotermsItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Incoterms resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Incoterms.jsonld-Incoterms-read'];
                    readonly 'application/json': components['schemas']['Incoterms-Incoterms-read'];
                    readonly 'multipart/form-data': components['schemas']['Incoterms-Incoterms-read'];
                    readonly 'text/html': components['schemas']['Incoterms-Incoterms-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Incoterms resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Incoterms-Incoterms-write'];
            };
        };
    };
    /** Récupère les délais de paiement des factures */
    readonly getInvoiceTimeDueCollection: {
        readonly parameters: {
            readonly query: {
                readonly endOfMonth?: boolean;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** InvoiceTimeDue collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['InvoiceTimeDue.jsonld-InvoiceTimeDue-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'][];
                    readonly 'text/html': readonly components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un délai de paiement des factures */
    readonly postInvoiceTimeDueCollection: {
        readonly parameters: {};
        readonly responses: {
            /** InvoiceTimeDue resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['InvoiceTimeDue.jsonld-InvoiceTimeDue-read'];
                    readonly 'application/json': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                    readonly 'multipart/form-data': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                    readonly 'text/html': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new InvoiceTimeDue resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['InvoiceTimeDue.jsonld-InvoiceTimeDue-write'];
                readonly 'application/json': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-write'];
                readonly 'multipart/form-data': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-write'];
                readonly 'text/html': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-write'];
            };
        };
    };
    /** Supprime un délai de paiement des factures */
    readonly deleteInvoiceTimeDueItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** InvoiceTimeDue resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un délai de paiement des factures */
    readonly patchInvoiceTimeDueItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** InvoiceTimeDue resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['InvoiceTimeDue.jsonld-InvoiceTimeDue-read'];
                    readonly 'application/json': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                    readonly 'multipart/form-data': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                    readonly 'text/html': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated InvoiceTimeDue resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['InvoiceTimeDue-InvoiceTimeDue-write'];
            };
        };
    };
    /** Récupère les formateurs extérieurs */
    readonly getOutTrainerCollection: {
        readonly parameters: {
            readonly query: {
                readonly 'address.address'?: string;
                readonly 'address.address2'?: string;
                readonly 'address.city'?: string;
                readonly 'address.country'?: string;
                readonly 'address.email'?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
                readonly surname?: string;
            };
        };
        readonly responses: {
            /** OutTrainer collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['OutTrainer.jsonld-OutTrainer-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['OutTrainer-OutTrainer-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['OutTrainer-OutTrainer-read'][];
                    readonly 'text/html': readonly components['schemas']['OutTrainer-OutTrainer-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un formateur extérieur */
    readonly postOutTrainerCollection: {
        readonly parameters: {};
        readonly responses: {
            /** OutTrainer resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['OutTrainer.jsonld-OutTrainer-read'];
                    readonly 'application/json': components['schemas']['OutTrainer-OutTrainer-read'];
                    readonly 'multipart/form-data': components['schemas']['OutTrainer-OutTrainer-read'];
                    readonly 'text/html': components['schemas']['OutTrainer-OutTrainer-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new OutTrainer resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['OutTrainer.jsonld-OutTrainer-write'];
                readonly 'application/json': components['schemas']['OutTrainer-OutTrainer-write'];
                readonly 'multipart/form-data': components['schemas']['OutTrainer-OutTrainer-write'];
                readonly 'text/html': components['schemas']['OutTrainer-OutTrainer-write'];
            };
        };
    };
    /** Supprime un formateur extérieur */
    readonly deleteOutTrainerItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** OutTrainer resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un formateur extérieur */
    readonly patchOutTrainerItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** OutTrainer resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['OutTrainer.jsonld-OutTrainer-read'];
                    readonly 'application/json': components['schemas']['OutTrainer-OutTrainer-read'];
                    readonly 'multipart/form-data': components['schemas']['OutTrainer-OutTrainer-read'];
                    readonly 'text/html': components['schemas']['OutTrainer-OutTrainer-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated OutTrainer resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['OutTrainer-OutTrainer-write'];
            };
        };
    };
    /** Récupère les produits */
    readonly getProductCollection: {
        readonly parameters: {
            readonly query: {
                readonly currentPlace?: string;
                readonly 'expirationDate[after]'?: string;
                readonly 'expirationDate[before]'?: string;
                readonly 'expirationDate[strictly_after]'?: string;
                readonly 'expirationDate[strictly_before]'?: string;
                readonly family?: string;
                readonly index?: string;
                readonly kind?: string;
                readonly 'order[index]'?: 'asc' | 'desc';
                readonly 'order[kind]'?: 'asc' | 'desc';
                readonly 'order[ref]'?: 'asc' | 'desc';
                /** The collection page number */
                readonly page?: number;
                readonly ref?: string;
            };
        };
        readonly responses: {
            /** Product collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Product.jsonld-Product-collection'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Product-Product-collection'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Product-Product-collection'][];
                    readonly 'text/html': readonly components['schemas']['Product-Product-collection'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un produit */
    readonly postProductCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Product resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Product resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-create'];
                readonly 'application/json': components['schemas']['Product-Product-create'];
                readonly 'multipart/form-data': components['schemas']['Product-Product-create'];
                readonly 'text/html': components['schemas']['Product-Product-create'];
            };
        };
    };
    /** Récupère un produit */
    readonly getProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Product resource */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Supprime un produit */
    readonly deleteProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Product resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Clone un produit */
    readonly cloneProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Product resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Product resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-clone'];
                readonly 'application/json': components['schemas']['Product-Product-clone'];
                readonly 'multipart/form-data': components['schemas']['Product-Product-clone'];
                readonly 'text/html': components['schemas']['Product-Product-clone'];
            };
        };
    };
    /** Transite le produit à son prochain statut de workflow */
    readonly promoteProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
                readonly transition:
                    | 'block'
                    | 'disable'
                    | 'partially_unlock'
                    | 'partially_validate'
                    | 'submit_validation'
                    | 'unlock'
                    | 'validate';
            };
        };
        readonly responses: {
            /** Product resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Évolue le produit au prochain indice */
    readonly upgradeProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Product resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Product resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-upgrade'];
                readonly 'application/json': components['schemas']['Product-Product-upgrade'];
                readonly 'multipart/form-data': components['schemas']['Product-Product-upgrade'];
                readonly 'text/html': components['schemas']['Product-Product-upgrade'];
            };
        };
    };
    /** Modifie un produit */
    readonly patchProductItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
                readonly process:
                    | 'admin'
                    | 'logistics'
                    | 'main'
                    | 'production'
                    | 'project';
            };
        };
        readonly responses: {
            /** Product resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Product.jsonld-Product-read'];
                    readonly 'application/json': components['schemas']['Product-Product-read'];
                    readonly 'multipart/form-data': components['schemas']['Product-Product-read'];
                    readonly 'text/html': components['schemas']['Product-Product-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Product resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Product-Product-write'];
            };
        };
    };
    /** Récupère les familles de produit */
    readonly getProductFamilyCollection: {
        readonly parameters: {
            readonly query: {
                readonly customsCode?: string;
                readonly name?: string;
                readonly parent?: number;
            };
        };
        readonly responses: {
            /** ProductFamily collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['ProductFamily.jsonld-ProductFamily-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['ProductFamily-ProductFamily-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['ProductFamily-ProductFamily-read'][];
                    readonly 'text/html': readonly components['schemas']['ProductFamily-ProductFamily-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer une famille de produit */
    readonly postProductFamilyCollection: {
        readonly parameters: {};
        readonly responses: {
            /** ProductFamily resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['ProductFamily.jsonld-ProductFamily-read'];
                    readonly 'application/json': components['schemas']['ProductFamily-ProductFamily-read'];
                    readonly 'multipart/form-data': components['schemas']['ProductFamily-ProductFamily-read'];
                    readonly 'text/html': components['schemas']['ProductFamily-ProductFamily-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new ProductFamily resource */
        readonly requestBody: {
            readonly content: {
                readonly 'multipart/form-data': components['schemas']['ProductFamily-ProductFamily-write'];
            };
        };
    };
    /** Modifie une famille de produit */
    readonly postProductFamilyItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** ProductFamily resource created */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['ProductFamily.jsonld-ProductFamily-read'];
                    readonly 'application/json': components['schemas']['ProductFamily-ProductFamily-read'];
                    readonly 'multipart/form-data': components['schemas']['ProductFamily-ProductFamily-read'];
                    readonly 'text/html': components['schemas']['ProductFamily-ProductFamily-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new ProductFamily resource */
        readonly requestBody: {
            readonly content: {
                readonly 'multipart/form-data': components['schemas']['ProductFamily-ProductFamily-write'];
            };
        };
    };
    /** Supprime une famille de produit */
    readonly deleteProductFamilyItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** ProductFamily resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Récupère les types qualités */
    readonly getQualityTypeCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** QualityType collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['QualityType.jsonld-QualityType-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['QualityType-QualityType-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['QualityType-QualityType-read'][];
                    readonly 'text/html': readonly components['schemas']['QualityType-QualityType-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un type qualité */
    readonly postQualityTypeCollection: {
        readonly parameters: {};
        readonly responses: {
            /** QualityType resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['QualityType.jsonld-QualityType-read'];
                    readonly 'application/json': components['schemas']['QualityType-QualityType-read'];
                    readonly 'multipart/form-data': components['schemas']['QualityType-QualityType-read'];
                    readonly 'text/html': components['schemas']['QualityType-QualityType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new QualityType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['QualityType.jsonld-QualityType-write'];
                readonly 'application/json': components['schemas']['QualityType-QualityType-write'];
                readonly 'multipart/form-data': components['schemas']['QualityType-QualityType-write'];
                readonly 'text/html': components['schemas']['QualityType-QualityType-write'];
            };
        };
    };
    /** Supprime un type qualité */
    readonly deleteQualityTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** QualityType resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un type qualité */
    readonly patchQualityTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** QualityType resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['QualityType.jsonld-QualityType-read'];
                    readonly 'application/json': components['schemas']['QualityType-QualityType-read'];
                    readonly 'multipart/form-data': components['schemas']['QualityType-QualityType-read'];
                    readonly 'text/html': components['schemas']['QualityType-QualityType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated QualityType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['QualityType-QualityType-write'];
            };
        };
    };
    /** Récupère les type de rebus */
    readonly getRejectTypeCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** RejectType collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['RejectType.jsonld-RejectType-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['RejectType-RejectType-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['RejectType-RejectType-read'][];
                    readonly 'text/html': readonly components['schemas']['RejectType-RejectType-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un type de rebus */
    readonly postRejectTypeCollection: {
        readonly parameters: {};
        readonly responses: {
            /** RejectType resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['RejectType.jsonld-RejectType-read'];
                    readonly 'application/json': components['schemas']['RejectType-RejectType-read'];
                    readonly 'multipart/form-data': components['schemas']['RejectType-RejectType-read'];
                    readonly 'text/html': components['schemas']['RejectType-RejectType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new RejectType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['RejectType.jsonld-RejectType-write'];
                readonly 'application/json': components['schemas']['RejectType-RejectType-write'];
                readonly 'multipart/form-data': components['schemas']['RejectType-RejectType-write'];
                readonly 'text/html': components['schemas']['RejectType-RejectType-write'];
            };
        };
    };
    /** Supprime un type de rebus */
    readonly deleteRejectTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** RejectType resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un type de rebus */
    readonly patchRejectTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** RejectType resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['RejectType.jsonld-RejectType-read'];
                    readonly 'application/json': components['schemas']['RejectType-RejectType-read'];
                    readonly 'multipart/form-data': components['schemas']['RejectType-RejectType-read'];
                    readonly 'text/html': components['schemas']['RejectType-RejectType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated RejectType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['RejectType-RejectType-write'];
            };
        };
    };
    /** Récupère les types de compétence */
    readonly getSkillTypeCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** SkillType collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['SkillType.jsonld-SkillType-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['SkillType-SkillType-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['SkillType-SkillType-read'][];
                    readonly 'text/html': readonly components['schemas']['SkillType-SkillType-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer les types de compétence */
    readonly postSkillTypeCollection: {
        readonly parameters: {};
        readonly responses: {
            /** SkillType resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['SkillType.jsonld-SkillType-read'];
                    readonly 'application/json': components['schemas']['SkillType-SkillType-read'];
                    readonly 'multipart/form-data': components['schemas']['SkillType-SkillType-read'];
                    readonly 'text/html': components['schemas']['SkillType-SkillType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new SkillType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['SkillType.jsonld-SkillType-write'];
                readonly 'application/json': components['schemas']['SkillType-SkillType-write'];
                readonly 'multipart/form-data': components['schemas']['SkillType-SkillType-write'];
                readonly 'text/html': components['schemas']['SkillType-SkillType-write'];
            };
        };
    };
    /** Supprime les types de compétence */
    readonly deleteSkillTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** SkillType resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie les types de compétence */
    readonly patchSkillTypeItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** SkillType resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['SkillType.jsonld-SkillType-read'];
                    readonly 'application/json': components['schemas']['SkillType-SkillType-read'];
                    readonly 'multipart/form-data': components['schemas']['SkillType-SkillType-read'];
                    readonly 'text/html': components['schemas']['SkillType-SkillType-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated SkillType resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['SkillType-SkillType-write'];
            };
        };
    };
    /** Récupère les plages horaires */
    readonly getTimeSlotCollection: {
        readonly parameters: {
            readonly query: {
                readonly end?: string;
                readonly endBreak?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
                readonly start?: string;
                readonly startBreak?: string;
            };
        };
        readonly responses: {
            /** TimeSlot collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['TimeSlot.jsonld-TimeSlot-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['TimeSlot-TimeSlot-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['TimeSlot-TimeSlot-read'][];
                    readonly 'text/html': readonly components['schemas']['TimeSlot-TimeSlot-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer une plage horaire */
    readonly postTimeSlotCollection: {
        readonly parameters: {};
        readonly responses: {
            /** TimeSlot resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['TimeSlot.jsonld-TimeSlot-read'];
                    readonly 'application/json': components['schemas']['TimeSlot-TimeSlot-read'];
                    readonly 'multipart/form-data': components['schemas']['TimeSlot-TimeSlot-read'];
                    readonly 'text/html': components['schemas']['TimeSlot-TimeSlot-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new TimeSlot resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['TimeSlot.jsonld-TimeSlot-write'];
                readonly 'application/json': components['schemas']['TimeSlot-TimeSlot-write'];
                readonly 'multipart/form-data': components['schemas']['TimeSlot-TimeSlot-write'];
                readonly 'text/html': components['schemas']['TimeSlot-TimeSlot-write'];
            };
        };
    };
    /** Supprime une plage horaire */
    readonly deleteTimeSlotItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** TimeSlot resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie une plage horaire */
    readonly patchTimeSlotItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** TimeSlot resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['TimeSlot.jsonld-TimeSlot-read'];
                    readonly 'application/json': components['schemas']['TimeSlot-TimeSlot-read'];
                    readonly 'multipart/form-data': components['schemas']['TimeSlot-TimeSlot-read'];
                    readonly 'text/html': components['schemas']['TimeSlot-TimeSlot-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated TimeSlot resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['TimeSlot-TimeSlot-write'];
            };
        };
    };
    /** Récupère les unités */
    readonly getUnitCollection: {
        readonly parameters: {
            readonly query: {
                readonly code?: string;
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** Unit collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['Unit.jsonld-Unit-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['Unit-Unit-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['Unit-Unit-read'][];
                    readonly 'text/html': readonly components['schemas']['Unit-Unit-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer une unité */
    readonly postUnitCollection: {
        readonly parameters: {};
        readonly responses: {
            /** Unit resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Unit.jsonld-Unit-read'];
                    readonly 'application/json': components['schemas']['Unit-Unit-read'];
                    readonly 'multipart/form-data': components['schemas']['Unit-Unit-read'];
                    readonly 'text/html': components['schemas']['Unit-Unit-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new Unit resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['Unit.jsonld-Unit-write'];
                readonly 'application/json': components['schemas']['Unit-Unit-write'];
                readonly 'multipart/form-data': components['schemas']['Unit-Unit-write'];
                readonly 'text/html': components['schemas']['Unit-Unit-write'];
            };
        };
    };
    /** Supprime une unité */
    readonly deleteUnitItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Unit resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie une unité */
    readonly patchUnitItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** Unit resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['Unit.jsonld-Unit-read'];
                    readonly 'application/json': components['schemas']['Unit-Unit-read'];
                    readonly 'multipart/form-data': components['schemas']['Unit-Unit-read'];
                    readonly 'text/html': components['schemas']['Unit-Unit-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated Unit resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['Unit-Unit-write'];
            };
        };
    };
    /** Récupère les messages TVA */
    readonly getVatMessageCollection: {
        readonly parameters: {
            readonly query: {
                readonly name?: string;
                /** The collection page number */
                readonly page?: number;
            };
        };
        readonly responses: {
            /** VatMessage collection */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': {
                        readonly 'hydra:member': readonly components['schemas']['VatMessage.jsonld-VatMessage-read'][];
                        readonly 'hydra:totalItems'?: number;
                        readonly 'hydra:view'?: {
                            /** Format: iri-reference */
                            readonly '@id'?: string;
                            readonly '@type'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:first'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:last'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:previous'?: string;
                            /** Format: iri-reference */
                            readonly 'hydra:next'?: string;
                        };
                        readonly 'hydra:search'?: {
                            readonly '@type'?: string;
                            readonly 'hydra:template'?: string;
                            readonly 'hydra:variableRepresentation'?: string;
                            readonly 'hydra:mapping'?: readonly {
                                readonly '@type'?: string;
                                readonly variable?: string;
                                readonly property?: string | null;
                                readonly required?: boolean;
                            }[];
                        };
                    };
                    readonly 'application/json': readonly components['schemas']['VatMessage-VatMessage-read'][];
                    readonly 'multipart/form-data': readonly components['schemas']['VatMessage-VatMessage-read'][];
                    readonly 'text/html': readonly components['schemas']['VatMessage-VatMessage-read'][];
                };
            };
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Créer un message TVA */
    readonly postVatMessageCollection: {
        readonly parameters: {};
        readonly responses: {
            /** VatMessage resource created */
            readonly 201: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['VatMessage.jsonld-VatMessage-read'];
                    readonly 'application/json': components['schemas']['VatMessage-VatMessage-read'];
                    readonly 'multipart/form-data': components['schemas']['VatMessage-VatMessage-read'];
                    readonly 'text/html': components['schemas']['VatMessage-VatMessage-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The new VatMessage resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/ld+json': components['schemas']['VatMessage.jsonld-VatMessage-write'];
                readonly 'application/json': components['schemas']['VatMessage-VatMessage-write'];
                readonly 'multipart/form-data': components['schemas']['VatMessage-VatMessage-write'];
                readonly 'text/html': components['schemas']['VatMessage-VatMessage-write'];
            };
        };
    };
    /** Supprime un message TVA */
    readonly deleteVatMessageItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** VatMessage resource deleted */
            readonly 204: never;
            /** Bad request */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
    };
    /** Modifie un message TVA */
    readonly patchVatMessageItem: {
        readonly parameters: {
            readonly path: {
                /** Resource identifier */
                readonly id: string;
            };
        };
        readonly responses: {
            /** VatMessage resource updated */
            readonly 200: {
                readonly content: {
                    readonly 'application/ld+json': components['schemas']['VatMessage.jsonld-VatMessage-read'];
                    readonly 'application/json': components['schemas']['VatMessage-VatMessage-read'];
                    readonly 'multipart/form-data': components['schemas']['VatMessage-VatMessage-read'];
                    readonly 'text/html': components['schemas']['VatMessage-VatMessage-read'];
                };
            };
            /** Invalid input */
            readonly 400: unknown;
            /** Unauthorized */
            readonly 401: unknown;
            /** Forbidden */
            readonly 403: unknown;
            /** Resource not found */
            readonly 404: unknown;
            /** Method Not Allowed */
            readonly 405: unknown;
            /** Unprocessable entity */
            readonly 422: unknown;
            /** Internal Server Error */
            readonly 500: unknown;
        };
        /** The updated VatMessage resource */
        readonly requestBody: {
            readonly content: {
                readonly 'application/merge-patch+json': components['schemas']['VatMessage-VatMessage-write'];
            };
        };
    };
}
