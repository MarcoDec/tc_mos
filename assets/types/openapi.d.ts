/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/login": {
    /** Connexion */
    post: operations["login"];
    parameters: {};
  };
  "/api/logout": {
    /** Déconnexion */
    post: operations["logout"];
    parameters: {};
  };
  "/api/carriers": {
    /** Récupère les transporteurs */
    get: operations["getCarrierCollection"];
    /** Créer un transporteur */
    post: operations["postCarrierCollection"];
    parameters: {};
  };
  "/api/carriers/{id}": {
    /** Supprime un transporteur */
    delete: operations["deleteCarrierItem"];
    /** Modifie un transporteur */
    patch: operations["patchCarrierItem"];
    parameters: {};
  };
  "/api/colors": {
    /** Récupère les couleurs */
    get: operations["getColorCollection"];
    /** Créer une couleur */
    post: operations["postColorCollection"];
    parameters: {};
  };
  "/api/colors/{id}": {
    /** Supprime une couleur */
    delete: operations["deleteColorItem"];
    /** Modifie une couleur */
    patch: operations["patchColorItem"];
    parameters: {};
  };
  "/api/component-families": {
    /** Récupère les familles de composant */
    get: operations["getComponentFamilyCollection"];
    /** Créer une famille de composant */
    post: operations["postComponentFamilyCollection"];
    parameters: {};
  };
  "/api/component-families/{id}": {
    /** Modifie une famille de composant */
    post: operations["postComponentFamilyItem"];
    /** Supprime une famille de composant */
    delete: operations["deleteComponentFamilyItem"];
    parameters: {};
  };
  "/api/currencies": {
    /** Récupère les devises */
    get: operations["getCurrencyCollection"];
    parameters: {};
  };
  "/api/currencies/{id}": {
    /** Modifie une devise */
    patch: operations["patchCurrencyItem"];
    parameters: {};
  };
  "/api/employees/{id}": {
    /** Récupère un employé */
    get: operations["getEmployeeItem"];
    parameters: {};
  };
  "/api/event-types": {
    /** Récupère les types d'événements */
    get: operations["getEventTypeCollection"];
    /** Créer un type d'événements */
    post: operations["postEventTypeCollection"];
    parameters: {};
  };
  "/api/event-types/{id}": {
    /** Supprime un type d'événements */
    delete: operations["deleteEventTypeItem"];
    /** Modifie un type d'événements */
    patch: operations["patchEventTypeItem"];
    parameters: {};
  };
  "/api/incoterms": {
    /** Récupère les incoterms */
    get: operations["getIncotermsCollection"];
    /** Créer un incoterms */
    post: operations["postIncotermsCollection"];
    parameters: {};
  };
  "/api/incoterms/{id}": {
    /** Supprime un incoterms */
    delete: operations["deleteIncotermsItem"];
    /** Modifie un incoterms */
    patch: operations["patchIncotermsItem"];
    parameters: {};
  };
  "/api/invoice-time-dues": {
    /** Récupère les délais de paiement des factures */
    get: operations["getInvoiceTimeDueCollection"];
    /** Créer un délai de paiement des factures */
    post: operations["postInvoiceTimeDueCollection"];
    parameters: {};
  };
  "/api/invoice-time-dues/{id}": {
    /** Supprime un délai de paiement des factures */
    delete: operations["deleteInvoiceTimeDueItem"];
    /** Modifie un délai de paiement des factures */
    patch: operations["patchInvoiceTimeDueItem"];
    parameters: {};
  };
  "/api/out-trainers": {
    /** Récupère les formateurs extérieurs */
    get: operations["getOutTrainerCollection"];
    /** Créer un formateur extérieur */
    post: operations["postOutTrainerCollection"];
    parameters: {};
  };
  "/api/out-trainers/{id}": {
    /** Supprime un formateur extérieur */
    delete: operations["deleteOutTrainerItem"];
    /** Modifie un formateur extérieur */
    patch: operations["patchOutTrainerItem"];
    parameters: {};
  };
  "/api/product-families": {
    /** Récupère les familles de produit */
    get: operations["getProductFamilyCollection"];
    /** Créer une famille de produit */
    post: operations["postProductFamilyCollection"];
    parameters: {};
  };
  "/api/product-families/{id}": {
    /** Modifie une famille de produit */
    post: operations["postProductFamilyItem"];
    /** Supprime une famille de produit */
    delete: operations["deleteProductFamilyItem"];
    parameters: {};
  };
  "/api/quality-types": {
    /** Récupère les types qualités */
    get: operations["getQualityTypeCollection"];
    /** Créer un type qualité */
    post: operations["postQualityTypeCollection"];
    parameters: {};
  };
  "/api/quality-types/{id}": {
    /** Supprime un type qualité */
    delete: operations["deleteQualityTypeItem"];
    /** Modifie un type qualité */
    patch: operations["patchQualityTypeItem"];
    parameters: {};
  };
  "/api/reject-types": {
    /** Récupère les type de rebus */
    get: operations["getRejectTypeCollection"];
    /** Créer un type de rebus */
    post: operations["postRejectTypeCollection"];
    parameters: {};
  };
  "/api/reject-types/{id}": {
    /** Supprime un type de rebus */
    delete: operations["deleteRejectTypeItem"];
    /** Modifie un type de rebus */
    patch: operations["patchRejectTypeItem"];
    parameters: {};
  };
  "/api/skill-types": {
    /** Récupère les types de compétence */
    get: operations["getSkillTypeCollection"];
    /** Créer les types de compétence */
    post: operations["postSkillTypeCollection"];
    parameters: {};
  };
  "/api/skill-types/{id}": {
    /** Supprime les types de compétence */
    delete: operations["deleteSkillTypeItem"];
    /** Modifie les types de compétence */
    patch: operations["patchSkillTypeItem"];
    parameters: {};
  };
  "/api/time-slots": {
    /** Récupère les plages horaires */
    get: operations["getTimeSlotCollection"];
    /** Créer une plage horaire */
    post: operations["postTimeSlotCollection"];
    parameters: {};
  };
  "/api/time-slots/{id}": {
    /** Supprime une plage horaire */
    delete: operations["deleteTimeSlotItem"];
    /** Modifie une plage horaire */
    patch: operations["patchTimeSlotItem"];
    parameters: {};
  };
  "/api/units": {
    /** Récupère les unités */
    get: operations["getUnitCollection"];
    /** Créer une unité */
    post: operations["postUnitCollection"];
    parameters: {};
  };
  "/api/units/{id}": {
    /** Supprime une unité */
    delete: operations["deleteUnitItem"];
    /** Modifie une unité */
    patch: operations["patchUnitItem"];
    parameters: {};
  };
  "/api/vat-messages": {
    /** Récupère les messages TVA */
    get: operations["getVatMessageCollection"];
    /** Créer un message TVA */
    post: operations["postVatMessageCollection"];
    parameters: {};
  };
  "/api/vat-messages/{id}": {
    /** Supprime un message TVA */
    delete: operations["deleteVatMessageItem"];
    /** Modifie un message TVA */
    patch: operations["patchVatMessageItem"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    "Address-Carrier-read": {
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address-Carrier-write": {
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address-OutTrainer-read": {
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address-OutTrainer-write": {
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address.jsonld-Carrier-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address.jsonld-Carrier-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address.jsonld-OutTrainer-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    "Address.jsonld-OutTrainer-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Adresse */
      address?: string | null;
      /** Complément d'adresse */
      address2?: string | null;
      /** Ville */
      city?: string | null;
      /** Pays */
      country?: string | null;
      /** E-mail */
      email?: string | null;
      /** Numéro de téléphone */
      phoneNumber?: string | null;
      /** Code postal */
      zipCode?: string | null;
    };
    Auth: {
      /** mot de passe */
      password?: string;
      /** identifiant */
      username?: string;
    };
    /** Transporteur */
    "Carrier-Carrier-read": {
      /** Nom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address-Carrier-read"];
      /** id */
      id?: number;
    };
    /** Transporteur */
    "Carrier-Carrier-write": {
      /** Nom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address-Carrier-write"];
    };
    /** Transporteur */
    "Carrier.jsonld-Carrier-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address.jsonld-Carrier-read"];
      /** id */
      id?: number;
    };
    /** Transporteur */
    "Carrier.jsonld-Carrier-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address.jsonld-Carrier-write"];
    };
    /** Couleur */
    "Color-Color-read": {
      /** nom */
      name: string | null;
      /** ral */
      ral?: string | null;
      /** rgb */
      rgb?: string | null;
      /** id */
      id?: number;
    };
    /** Couleur */
    "Color-Color-write": {
      /** nom */
      name: string | null;
      /** ral */
      ral?: string | null;
      /** rgb */
      rgb?: string | null;
    };
    /** Couleur */
    "Color.jsonld-Color-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** nom */
      name: string | null;
      /** ral */
      ral?: string | null;
      /** rgb */
      rgb?: string | null;
      /** id */
      id?: number;
    };
    /** Couleur */
    "Color.jsonld-Color-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** nom */
      name: string | null;
      /** ral */
      ral?: string | null;
      /** rgb */
      rgb?: string | null;
    };
    /** Famille de composant */
    "ComponentFamily-ComponentFamily-read": {
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      /** Code */
      code?: string;
      /** Cuivré */
      copperable?: boolean;
      /** id */
      id?: number;
      /** Icône */
      filepath?: string | null;
      customsCode?: string | null;
    };
    /** Famille de composant */
    "ComponentFamily-ComponentFamily-write": {
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      /** Code */
      code?: string;
      /** Cuivré */
      copperable?: boolean;
      customsCode?: string | null;
      file?: string | null;
    };
    /** Famille de composant */
    "ComponentFamily.jsonld-ComponentFamily-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      /** Code */
      code?: string;
      /** Cuivré */
      copperable?: boolean;
      /** id */
      id?: number;
      /** Icône */
      filepath?: string | null;
      customsCode?: string | null;
    };
    /** Devises */
    "Currency-Currency-read": {
      /** Active */
      active?: boolean;
      /** Code */
      code: string;
      /** Taux (€) */
      rate: number;
      /** id */
      id?: number;
      /** Nom */
      name?: string | null;
      /** Symbole */
      symbol?: string | null;
    };
    /** Devises */
    "Currency-Currency-write": {
      /** Active */
      active?: boolean;
    };
    /** Devises */
    "Currency.jsonld-Currency-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** Active */
      active?: boolean;
      /** Code */
      code: string;
      /** Taux (€) */
      rate: number;
      /** id */
      id?: number;
      /** Nom */
      name?: string | null;
      /** Symbole */
      symbol?: string | null;
    };
    /** Employé */
    "Employee-Employee-read": {
      /** Nom */
      name: string;
      /** identifiant */
      username?: string;
      /** id */
      id?: number;
      /** Rôles */
      roles?: string[];
      /** Token */
      token?: string | null;
    };
    /** Employé */
    "Employee.jsonld-Employee-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** identifiant */
      username?: string;
      /** id */
      id?: number;
      /** Rôles */
      roles?: string[];
      /** Token */
      token?: string | null;
    };
    /** Type d'événements */
    "EventType-EventType-read": {
      /** Nom */
      name: string;
      /** Status */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
      /** id */
      id?: number;
    };
    /** Type d'événements */
    "EventType-EventType-write": {
      /** Nom */
      name: string;
      /** Status */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** Type d'événements */
    "EventType.jsonld-EventType-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Status */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
      /** id */
      id?: number;
    };
    /** Type d'événements */
    "EventType.jsonld-EventType-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Status */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** Incoterms */
    "Incoterms-Incoterms-read": {
      /** Nom */
      name: string;
      /** Code */
      code: string;
      /** id */
      id?: number;
    };
    /** Incoterms */
    "Incoterms-Incoterms-write": {
      /** Nom */
      name: string;
      /** Code */
      code: string;
    };
    /** Incoterms */
    "Incoterms.jsonld-Incoterms-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Code */
      code: string;
      /** id */
      id?: number;
    };
    /** Incoterms */
    "Incoterms.jsonld-Incoterms-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Code */
      code: string;
    };
    /** Délai de paiement des factures */
    "InvoiceTimeDue-InvoiceTimeDue-read": {
      /** Nom */
      name: string;
      /** Jours */
      days?: number;
      /** Jours après la fin du mois */
      daysAfterEndOfMonth?: number;
      /** Fin du mois */
      endOfMonth?: boolean;
      /** id */
      id?: number;
    };
    /** Délai de paiement des factures */
    "InvoiceTimeDue-InvoiceTimeDue-write": {
      /** Nom */
      name: string;
      /** Jours */
      days?: number;
      /** Jours après la fin du mois */
      daysAfterEndOfMonth?: number;
      /** Fin du mois */
      endOfMonth?: boolean;
    };
    /** Délai de paiement des factures */
    "InvoiceTimeDue.jsonld-InvoiceTimeDue-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Jours */
      days?: number;
      /** Jours après la fin du mois */
      daysAfterEndOfMonth?: number;
      /** Fin du mois */
      endOfMonth?: boolean;
      /** id */
      id?: number;
    };
    /** Délai de paiement des factures */
    "InvoiceTimeDue.jsonld-InvoiceTimeDue-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Jours */
      days?: number;
      /** Jours après la fin du mois */
      daysAfterEndOfMonth?: number;
      /** Fin du mois */
      endOfMonth?: boolean;
    };
    /** Formateur extérieur */
    "OutTrainer-OutTrainer-read": {
      /** Prénom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address-OutTrainer-read"];
      /** Nom */
      surname: string;
      /** id */
      id?: number;
    };
    /** Formateur extérieur */
    "OutTrainer-OutTrainer-write": {
      /** Prénom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address-OutTrainer-write"];
      /** Nom */
      surname: string;
    };
    /** Formateur extérieur */
    "OutTrainer.jsonld-OutTrainer-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Prénom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address.jsonld-OutTrainer-read"];
      /** Nom */
      surname: string;
      /** id */
      id?: number;
    };
    /** Formateur extérieur */
    "OutTrainer.jsonld-OutTrainer-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Prénom */
      name: string;
      /** Adresse */
      address?: components["schemas"]["Address.jsonld-OutTrainer-write"];
      /** Nom */
      surname: string;
    };
    /** Famille de produit */
    "ProductFamily-ProductFamily-read": {
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      /** id */
      id?: number;
      /** Icône */
      filepath?: string | null;
      customsCode?: string | null;
    };
    /** Famille de produit */
    "ProductFamily-ProductFamily-write": {
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      customsCode?: string | null;
      file?: string | null;
    };
    /** Famille de produit */
    "ProductFamily.jsonld-ProductFamily-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Famille parente */
      parent?: string | null;
      /** id */
      id?: number;
      /** Icône */
      filepath?: string | null;
      customsCode?: string | null;
    };
    /** Type qualité */
    "QualityType-QualityType-read": {
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type qualité */
    "QualityType-QualityType-write": {
      /** Nom */
      name: string;
    };
    /** Type qualité */
    "QualityType.jsonld-QualityType-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type qualité */
    "QualityType.jsonld-QualityType-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
    };
    /** Type de rebus */
    "RejectType-RejectType-read": {
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type de rebus */
    "RejectType-RejectType-write": {
      /** Nom */
      name: string;
    };
    /** Type de rebus */
    "RejectType.jsonld-RejectType-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type de rebus */
    "RejectType.jsonld-RejectType-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
    };
    /** Type de compétence */
    "SkillType-SkillType-read": {
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type de compétence */
    "SkillType-SkillType-write": {
      /** Nom */
      name: string;
    };
    /** Type de compétence */
    "SkillType.jsonld-SkillType-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** id */
      id?: number;
    };
    /** Type de compétence */
    "SkillType.jsonld-SkillType-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
    };
    /** Plages horaires */
    "TimeSlot-TimeSlot-read": {
      /** Nom */
      name: string;
      /** Fin */
      end?: string | null;
      /** Fin pause */
      endBreak?: string | null;
      /** Début */
      start?: string | null;
      /** Début pause */
      startBreak?: string | null;
      /** id */
      id?: number;
    };
    /** Plages horaires */
    "TimeSlot-TimeSlot-write": {
      /** Nom */
      name: string;
      /** Fin */
      end?: string | null;
      /** Fin pause */
      endBreak?: string | null;
      /** Début */
      start?: string | null;
      /** Début pause */
      startBreak?: string | null;
    };
    /** Plages horaires */
    "TimeSlot.jsonld-TimeSlot-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Fin */
      end?: string | null;
      /** Fin pause */
      endBreak?: string | null;
      /** Début */
      start?: string | null;
      /** Début pause */
      startBreak?: string | null;
      /** id */
      id?: number;
    };
    /** Plages horaires */
    "TimeSlot.jsonld-TimeSlot-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Fin */
      end?: string | null;
      /** Fin pause */
      endBreak?: string | null;
      /** Début */
      start?: string | null;
      /** Début pause */
      startBreak?: string | null;
    };
    /** Unit */
    "Unit-Unit-read": {
      /** Nom */
      name: string;
      /** Code */
      code: string;
      /** id */
      id?: number;
    };
    /** Unit */
    "Unit-Unit-write": {
      /** Nom */
      name: string;
      /** Code */
      code: string;
    };
    /** Unit */
    "Unit.jsonld-Unit-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Code */
      code: string;
      /** id */
      id?: number;
    };
    /** Unit */
    "Unit.jsonld-Unit-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Nom */
      name: string;
      /** Code */
      code: string;
    };
    /** Message TVA */
    "VatMessage-VatMessage-read": {
      /** Message */
      name: string;
      /** id */
      id?: number;
    };
    /** Message TVA */
    "VatMessage-VatMessage-write": {
      /** Message */
      name: string;
    };
    /** Message TVA */
    "VatMessage.jsonld-VatMessage-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Message */
      name: string;
      /** id */
      id?: number;
    };
    /** Message TVA */
    "VatMessage.jsonld-VatMessage-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Message */
      name: string;
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Connexion */
  login: {
    parameters: {};
    responses: {
      /** Utilisateur connecté */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Employee.jsonld-Employee-read"];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** Identifiants */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Auth"];
      };
    };
  };
  /** Déconnexion */
  logout: {
    parameters: {};
    responses: {
      /** Déconnexion réussie */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les transporteurs */
  getCarrierCollection: {
    parameters: {
      query: {
        "address.address"?: string;
        "address.address2"?: string;
        "address.city"?: string;
        "address.country"?: string;
        "address.email"?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Carrier collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Carrier.jsonld-Carrier-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Carrier-Carrier-read"][];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"][];
          "text/html": components["schemas"]["Carrier-Carrier-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un transporteur */
  postCarrierCollection: {
    parameters: {};
    responses: {
      /** Carrier resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-read"];
          "application/json": components["schemas"]["Carrier-Carrier-read"];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"];
          "text/html": components["schemas"]["Carrier-Carrier-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Carrier resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-write"];
        "application/json": components["schemas"]["Carrier-Carrier-write"];
        "multipart/form-data": components["schemas"]["Carrier-Carrier-write"];
        "text/html": components["schemas"]["Carrier-Carrier-write"];
      };
    };
  };
  /** Supprime un transporteur */
  deleteCarrierItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Carrier resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un transporteur */
  patchCarrierItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Carrier resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-read"];
          "application/json": components["schemas"]["Carrier-Carrier-read"];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"];
          "text/html": components["schemas"]["Carrier-Carrier-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Carrier resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Carrier-Carrier-write"];
      };
    };
  };
  /** Récupère les couleurs */
  getColorCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
        ral?: string;
        rgb?: string;
      };
    };
    responses: {
      /** Color collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Color.jsonld-Color-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Color-Color-read"][];
          "multipart/form-data": components["schemas"]["Color-Color-read"][];
          "text/html": components["schemas"]["Color-Color-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une couleur */
  postColorCollection: {
    parameters: {};
    responses: {
      /** Color resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Color.jsonld-Color-read"];
          "application/json": components["schemas"]["Color-Color-read"];
          "multipart/form-data": components["schemas"]["Color-Color-read"];
          "text/html": components["schemas"]["Color-Color-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Color resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Color.jsonld-Color-write"];
        "application/json": components["schemas"]["Color-Color-write"];
        "multipart/form-data": components["schemas"]["Color-Color-write"];
        "text/html": components["schemas"]["Color-Color-write"];
      };
    };
  };
  /** Supprime une couleur */
  deleteColorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Color resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une couleur */
  patchColorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Color resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Color.jsonld-Color-read"];
          "application/json": components["schemas"]["Color-Color-read"];
          "multipart/form-data": components["schemas"]["Color-Color-read"];
          "text/html": components["schemas"]["Color-Color-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Color resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Color-Color-write"];
      };
    };
  };
  /** Récupère les familles de composant */
  getComponentFamilyCollection: {
    parameters: {
      query: {
        code?: string;
        copperable?: boolean;
        customsCode?: string;
        name?: string;
        parent?: number;
      };
    };
    responses: {
      /** ComponentFamily collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une famille de composant */
  postComponentFamilyCollection: {
    parameters: {};
    responses: {
      /** ComponentFamily resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"];
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ComponentFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-write"];
      };
    };
  };
  /** Modifie une famille de composant */
  postComponentFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ComponentFamily resource created */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"];
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ComponentFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-write"];
      };
    };
  };
  /** Supprime une famille de composant */
  deleteComponentFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ComponentFamily resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les devises */
  getCurrencyCollection: {
    parameters: {};
    responses: {
      /** Currency collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Currency.jsonld-Currency-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Currency-Currency-read"][];
          "multipart/form-data": components["schemas"]["Currency-Currency-read"][];
          "text/html": components["schemas"]["Currency-Currency-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une devise */
  patchCurrencyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Currency resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Currency.jsonld-Currency-read"];
          "application/json": components["schemas"]["Currency-Currency-read"];
          "multipart/form-data": components["schemas"]["Currency-Currency-read"];
          "text/html": components["schemas"]["Currency-Currency-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Currency resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Currency-Currency-write"];
      };
    };
  };
  /** Récupère un employé */
  getEmployeeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Employee resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Employee.jsonld-Employee-read"];
          "application/json": components["schemas"]["Employee-Employee-read"];
          "multipart/form-data": components["schemas"]["Employee-Employee-read"];
          "text/html": components["schemas"]["Employee-Employee-read"];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les types d'événements */
  getEventTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
        toStatus?: "blocked" | "disabled" | "enabled" | "warning";
      };
    };
    responses: {
      /** EventType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["EventType.jsonld-EventType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["EventType-EventType-read"][];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"][];
          "text/html": components["schemas"]["EventType-EventType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type d'événements */
  postEventTypeCollection: {
    parameters: {};
    responses: {
      /** EventType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["EventType.jsonld-EventType-read"];
          "application/json": components["schemas"]["EventType-EventType-read"];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"];
          "text/html": components["schemas"]["EventType-EventType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new EventType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["EventType.jsonld-EventType-write"];
        "application/json": components["schemas"]["EventType-EventType-write"];
        "multipart/form-data": components["schemas"]["EventType-EventType-write"];
        "text/html": components["schemas"]["EventType-EventType-write"];
      };
    };
  };
  /** Supprime un type d'événements */
  deleteEventTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EventType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type d'événements */
  patchEventTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EventType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["EventType.jsonld-EventType-read"];
          "application/json": components["schemas"]["EventType-EventType-read"];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"];
          "text/html": components["schemas"]["EventType-EventType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated EventType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["EventType-EventType-write"];
      };
    };
  };
  /** Récupère les incoterms */
  getIncotermsCollection: {
    parameters: {
      query: {
        code?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Incoterms collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Incoterms.jsonld-Incoterms-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Incoterms-Incoterms-read"][];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"][];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un incoterms */
  postIncotermsCollection: {
    parameters: {};
    responses: {
      /** Incoterms resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-read"];
          "application/json": components["schemas"]["Incoterms-Incoterms-read"];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Incoterms resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-write"];
        "application/json": components["schemas"]["Incoterms-Incoterms-write"];
        "multipart/form-data": components["schemas"]["Incoterms-Incoterms-write"];
        "text/html": components["schemas"]["Incoterms-Incoterms-write"];
      };
    };
  };
  /** Supprime un incoterms */
  deleteIncotermsItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Incoterms resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un incoterms */
  patchIncotermsItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Incoterms resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-read"];
          "application/json": components["schemas"]["Incoterms-Incoterms-read"];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Incoterms resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Incoterms-Incoterms-write"];
      };
    };
  };
  /** Récupère les délais de paiement des factures */
  getInvoiceTimeDueCollection: {
    parameters: {
      query: {
        days?: number;
        daysAfterEndOfMonth?: number;
        endOfMonth?: boolean;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** InvoiceTimeDue collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un délai de paiement des factures */
  postInvoiceTimeDueCollection: {
    parameters: {};
    responses: {
      /** InvoiceTimeDue resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"];
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new InvoiceTimeDue resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-write"];
        "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
        "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
        "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
      };
    };
  };
  /** Supprime un délai de paiement des factures */
  deleteInvoiceTimeDueItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** InvoiceTimeDue resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un délai de paiement des factures */
  patchInvoiceTimeDueItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** InvoiceTimeDue resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"];
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated InvoiceTimeDue resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
      };
    };
  };
  /** Récupère les formateurs extérieurs */
  getOutTrainerCollection: {
    parameters: {
      query: {
        "address.address"?: string;
        "address.address2"?: string;
        "address.city"?: string;
        "address.country"?: string;
        "address.email"?: string;
        name?: string;
        /** The collection page number */
        page?: number;
        surname?: string;
      };
    };
    responses: {
      /** OutTrainer collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"][];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"][];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un formateur extérieur */
  postOutTrainerCollection: {
    parameters: {};
    responses: {
      /** OutTrainer resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"];
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new OutTrainer resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-write"];
        "application/json": components["schemas"]["OutTrainer-OutTrainer-write"];
        "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-write"];
        "text/html": components["schemas"]["OutTrainer-OutTrainer-write"];
      };
    };
  };
  /** Supprime un formateur extérieur */
  deleteOutTrainerItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OutTrainer resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un formateur extérieur */
  patchOutTrainerItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OutTrainer resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"];
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated OutTrainer resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["OutTrainer-OutTrainer-write"];
      };
    };
  };
  /** Récupère les familles de produit */
  getProductFamilyCollection: {
    parameters: {
      query: {
        customsCode?: string;
        name?: string;
        parent?: number;
      };
    };
    responses: {
      /** ProductFamily collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"][];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"][];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une famille de produit */
  postProductFamilyCollection: {
    parameters: {};
    responses: {
      /** ProductFamily resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"];
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ProductFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-write"];
      };
    };
  };
  /** Modifie une famille de produit */
  postProductFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ProductFamily resource created */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"];
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ProductFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-write"];
      };
    };
  };
  /** Supprime une famille de produit */
  deleteProductFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ProductFamily resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les types qualités */
  getQualityTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** QualityType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["QualityType.jsonld-QualityType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["QualityType-QualityType-read"][];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"][];
          "text/html": components["schemas"]["QualityType-QualityType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type qualité */
  postQualityTypeCollection: {
    parameters: {};
    responses: {
      /** QualityType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-read"];
          "application/json": components["schemas"]["QualityType-QualityType-read"];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"];
          "text/html": components["schemas"]["QualityType-QualityType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new QualityType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-write"];
        "application/json": components["schemas"]["QualityType-QualityType-write"];
        "multipart/form-data": components["schemas"]["QualityType-QualityType-write"];
        "text/html": components["schemas"]["QualityType-QualityType-write"];
      };
    };
  };
  /** Supprime un type qualité */
  deleteQualityTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** QualityType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type qualité */
  patchQualityTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** QualityType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-read"];
          "application/json": components["schemas"]["QualityType-QualityType-read"];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"];
          "text/html": components["schemas"]["QualityType-QualityType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated QualityType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["QualityType-QualityType-write"];
      };
    };
  };
  /** Récupère les type de rebus */
  getRejectTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** RejectType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["RejectType.jsonld-RejectType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["RejectType-RejectType-read"][];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"][];
          "text/html": components["schemas"]["RejectType-RejectType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type de rebus */
  postRejectTypeCollection: {
    parameters: {};
    responses: {
      /** RejectType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-read"];
          "application/json": components["schemas"]["RejectType-RejectType-read"];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"];
          "text/html": components["schemas"]["RejectType-RejectType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new RejectType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-write"];
        "application/json": components["schemas"]["RejectType-RejectType-write"];
        "multipart/form-data": components["schemas"]["RejectType-RejectType-write"];
        "text/html": components["schemas"]["RejectType-RejectType-write"];
      };
    };
  };
  /** Supprime un type de rebus */
  deleteRejectTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** RejectType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type de rebus */
  patchRejectTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** RejectType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-read"];
          "application/json": components["schemas"]["RejectType-RejectType-read"];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"];
          "text/html": components["schemas"]["RejectType-RejectType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated RejectType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["RejectType-RejectType-write"];
      };
    };
  };
  /** Récupère les types de compétence */
  getSkillTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** SkillType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["SkillType.jsonld-SkillType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["SkillType-SkillType-read"][];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"][];
          "text/html": components["schemas"]["SkillType-SkillType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer les types de compétence */
  postSkillTypeCollection: {
    parameters: {};
    responses: {
      /** SkillType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-read"];
          "application/json": components["schemas"]["SkillType-SkillType-read"];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"];
          "text/html": components["schemas"]["SkillType-SkillType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new SkillType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-write"];
        "application/json": components["schemas"]["SkillType-SkillType-write"];
        "multipart/form-data": components["schemas"]["SkillType-SkillType-write"];
        "text/html": components["schemas"]["SkillType-SkillType-write"];
      };
    };
  };
  /** Supprime les types de compétence */
  deleteSkillTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** SkillType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie les types de compétence */
  patchSkillTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** SkillType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-read"];
          "application/json": components["schemas"]["SkillType-SkillType-read"];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"];
          "text/html": components["schemas"]["SkillType-SkillType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated SkillType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["SkillType-SkillType-write"];
      };
    };
  };
  /** Récupère les plages horaires */
  getTimeSlotCollection: {
    parameters: {
      query: {
        end?: string;
        endBreak?: string;
        name?: string;
        /** The collection page number */
        page?: number;
        start?: string;
        startBreak?: string;
      };
    };
    responses: {
      /** TimeSlot collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"][];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"][];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une plage horaire */
  postTimeSlotCollection: {
    parameters: {};
    responses: {
      /** TimeSlot resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"];
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new TimeSlot resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-write"];
        "application/json": components["schemas"]["TimeSlot-TimeSlot-write"];
        "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-write"];
        "text/html": components["schemas"]["TimeSlot-TimeSlot-write"];
      };
    };
  };
  /** Supprime une plage horaire */
  deleteTimeSlotItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** TimeSlot resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une plage horaire */
  patchTimeSlotItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** TimeSlot resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"];
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated TimeSlot resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["TimeSlot-TimeSlot-write"];
      };
    };
  };
  /** Récupère les unités */
  getUnitCollection: {
    parameters: {
      query: {
        code?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Unit collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Unit.jsonld-Unit-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Unit-Unit-read"][];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"][];
          "text/html": components["schemas"]["Unit-Unit-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une unité */
  postUnitCollection: {
    parameters: {};
    responses: {
      /** Unit resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Unit.jsonld-Unit-read"];
          "application/json": components["schemas"]["Unit-Unit-read"];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"];
          "text/html": components["schemas"]["Unit-Unit-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Unit resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Unit.jsonld-Unit-write"];
        "application/json": components["schemas"]["Unit-Unit-write"];
        "multipart/form-data": components["schemas"]["Unit-Unit-write"];
        "text/html": components["schemas"]["Unit-Unit-write"];
      };
    };
  };
  /** Supprime une unité */
  deleteUnitItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Unit resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une unité */
  patchUnitItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Unit resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Unit.jsonld-Unit-read"];
          "application/json": components["schemas"]["Unit-Unit-read"];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"];
          "text/html": components["schemas"]["Unit-Unit-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Unit resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Unit-Unit-write"];
      };
    };
  };
  /** Récupère les messages TVA */
  getVatMessageCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** VatMessage collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["VatMessage.jsonld-VatMessage-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              "@id"?: string;
              "@type"?: string;
              "hydra:first"?: string;
              "hydra:last"?: string;
              "hydra:previous"?: string;
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["VatMessage-VatMessage-read"][];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"][];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un message TVA */
  postVatMessageCollection: {
    parameters: {};
    responses: {
      /** VatMessage resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-read"];
          "application/json": components["schemas"]["VatMessage-VatMessage-read"];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new VatMessage resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-write"];
        "application/json": components["schemas"]["VatMessage-VatMessage-write"];
        "multipart/form-data": components["schemas"]["VatMessage-VatMessage-write"];
        "text/html": components["schemas"]["VatMessage-VatMessage-write"];
      };
    };
  };
  /** Supprime un message TVA */
  deleteVatMessageItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** VatMessage resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un message TVA */
  patchVatMessageItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** VatMessage resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-read"];
          "application/json": components["schemas"]["VatMessage-VatMessage-read"];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated VatMessage resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["VatMessage-VatMessage-write"];
      };
    };
  };
}

export interface external {}
