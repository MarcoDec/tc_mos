/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/login": {
    /** Connexion */
    post: operations["login"];
    parameters: {};
  };
  "/api/logout": {
    /** Déconnexion */
    post: operations["logout"];
    parameters: {};
  };
  "/api/carriers": {
    /** Récupère les transporteurs */
    get: operations["getCarrierCollection"];
    /** Créer un transporteur */
    post: operations["postCarrierCollection"];
    parameters: {};
  };
  "/api/carriers/{id}": {
    /** Supprime un transporteur */
    delete: operations["deleteCarrierItem"];
    /** Modifie un transporteur */
    patch: operations["patchCarrierItem"];
    parameters: {};
  };
  "/api/colors": {
    /** Récupère les couleurs */
    get: operations["getColorCollection"];
    /** Créer une couleur */
    post: operations["postColorCollection"];
    parameters: {};
  };
  "/api/colors/{id}": {
    /** Supprime une couleur */
    delete: operations["deleteColorItem"];
    /** Modifie une couleur */
    patch: operations["patchColorItem"];
    parameters: {};
  };
  "/api/component-families": {
    /** Récupère les familles de composant */
    get: operations["getComponentFamilyCollection"];
    /** Créer une famille de composant */
    post: operations["postComponentFamilyCollection"];
    parameters: {};
  };
  "/api/component-families/{id}": {
    /** Modifie une famille de composant */
    post: operations["postComponentFamilyItem"];
    /** Supprime une famille de composant */
    delete: operations["deleteComponentFamilyItem"];
    parameters: {};
  };
  "/api/currencies": {
    /** Récupère les devises */
    get: operations["getCurrencyCollection"];
    parameters: {};
  };
  "/api/currencies/{id}": {
    /** Modifie une devise */
    patch: operations["patchCurrencyItem"];
    parameters: {};
  };
  "/api/employees/{id}": {
    /** Récupère un employé */
    get: operations["getEmployeeItem"];
    parameters: {};
  };
  "/api/counter-part-groups": {
    /** créer un groupe de contrepartie de test */
    post: operations["postCounterPartGroupCollection"];
    parameters: {};
  };
  "/api/engine-groups": {
    /** Récupère les groupes d'équipement */
    get: operations["getEngineGroupCollection"];
    parameters: {};
  };
  "/api/engine-groups/{id}": {
    /** Supprime un groupe d'équipement */
    delete: operations["deleteEngineGroupItem"];
    /** Modifie un groupe d'équipement */
    patch: operations["patchEngineGroupItem"];
    parameters: {};
  };
  "/api/tool-groups": {
    /** Créer un groupe d'outil */
    post: operations["postToolGroupCollection"];
    parameters: {};
  };
  "/api/workstation-groups": {
    /** Créer un groupe de poste de travail */
    post: operations["postWorkstationGroupCollection"];
    parameters: {};
  };
  "/api/event-types": {
    /** Récupère les types d'événements */
    get: operations["getEventTypeCollection"];
    /** Créer un type d'événements */
    post: operations["postEventTypeCollection"];
    parameters: {};
  };
  "/api/event-types/{id}": {
    /** Supprime un type d'événements */
    delete: operations["deleteEventTypeItem"];
    /** Modifie un type d'événements */
    patch: operations["patchEventTypeItem"];
    parameters: {};
  };
  "/api/incoterms": {
    /** Récupère les incoterms */
    get: operations["getIncotermsCollection"];
    /** Créer un incoterms */
    post: operations["postIncotermsCollection"];
    parameters: {};
  };
  "/api/incoterms/{id}": {
    /** Supprime un incoterms */
    delete: operations["deleteIncotermsItem"];
    /** Modifie un incoterms */
    patch: operations["patchIncotermsItem"];
    parameters: {};
  };
  "/api/invoice-time-dues": {
    /** Récupère les délais de paiement des factures */
    get: operations["getInvoiceTimeDueCollection"];
    /** Créer un délai de paiement des factures */
    post: operations["postInvoiceTimeDueCollection"];
    parameters: {};
  };
  "/api/invoice-time-dues/{id}": {
    /** Supprime un délai de paiement des factures */
    delete: operations["deleteInvoiceTimeDueItem"];
    /** Modifie un délai de paiement des factures */
    patch: operations["patchInvoiceTimeDueItem"];
    parameters: {};
  };
  "/api/notifications": {
    /** Récupère les notifications de l'utilisateur courant */
    get: operations["getNotificationCollection"];
    parameters: {};
  };
  "/api/notifications/category/all": {
    /** Supprime les notifications de l'utilisateur dans la catégorie */
    delete: operations["deleteNotificationCollection"];
    parameters: {};
  };
  "/api/notifications/category/read-all": {
    /** Marque les notifications de l'utilisateur dans la catégorie */
    patch: operations["patchNotificationCollection"];
    parameters: {};
  };
  "/api/notifications/{id}": {
    /** Supprime la notification */
    delete: operations["deleteNotificationItem"];
    /** Marque la notifications comme lue */
    patch: operations["patchNotificationItem"];
    parameters: {};
  };
  "/api/out-trainers": {
    /** Récupère les formateurs extérieurs */
    get: operations["getOutTrainerCollection"];
    /** Créer un formateur extérieur */
    post: operations["postOutTrainerCollection"];
    parameters: {};
  };
  "/api/out-trainers/{id}": {
    /** Supprime un formateur extérieur */
    delete: operations["deleteOutTrainerItem"];
    /** Modifie un formateur extérieur */
    patch: operations["patchOutTrainerItem"];
    parameters: {};
  };
  "/api/products": {
    /** Récupère les produits */
    get: operations["getProductCollection"];
    /** Créer un produit */
    post: operations["postProductCollection"];
    parameters: {};
  };
  "/api/products/{id}": {
    /** Récupère un produit */
    get: operations["getProductItem"];
    /** Supprime un produit */
    delete: operations["deleteProductItem"];
    parameters: {};
  };
  "/api/products/{id}/clone": {
    /** Clone un produit */
    post: operations["cloneProductItem"];
    parameters: {};
  };
  "/api/products/{id}/promote/{transition}": {
    /** Transite le produit à son prochain statut de workflow */
    patch: operations["promoteProductItem"];
    parameters: {};
  };
  "/api/products/{id}/upgrade": {
    /** Évolue le produit au prochain indice */
    post: operations["upgradeProductItem"];
    parameters: {};
  };
  "/api/products/{id}/{process}": {
    /** Modifie un produit */
    patch: operations["patchProductItem"];
    parameters: {};
  };
  "/api/product-families": {
    /** Récupère les familles de produit */
    get: operations["getProductFamilyCollection"];
    /** Créer une famille de produit */
    post: operations["postProductFamilyCollection"];
    parameters: {};
  };
  "/api/product-families/{id}": {
    /** Modifie une famille de produit */
    post: operations["postProductFamilyItem"];
    /** Supprime une famille de produit */
    delete: operations["deleteProductFamilyItem"];
    parameters: {};
  };
  "/api/quality-types": {
    /** Récupère les types qualités */
    get: operations["getQualityTypeCollection"];
    /** Créer un type qualité */
    post: operations["postQualityTypeCollection"];
    parameters: {};
  };
  "/api/quality-types/{id}": {
    /** Supprime un type qualité */
    delete: operations["deleteQualityTypeItem"];
    /** Modifie un type qualité */
    patch: operations["patchQualityTypeItem"];
    parameters: {};
  };
  "/api/reject-types": {
    /** Récupère les type de rebus */
    get: operations["getRejectTypeCollection"];
    /** Créer un type de rebus */
    post: operations["postRejectTypeCollection"];
    parameters: {};
  };
  "/api/reject-types/{id}": {
    /** Supprime un type de rebus */
    delete: operations["deleteRejectTypeItem"];
    /** Modifie un type de rebus */
    patch: operations["patchRejectTypeItem"];
    parameters: {};
  };
  "/api/skill-types": {
    /** Récupère les types de compétence */
    get: operations["getSkillTypeCollection"];
    /** Créer les types de compétence */
    post: operations["postSkillTypeCollection"];
    parameters: {};
  };
  "/api/skill-types/{id}": {
    /** Supprime les types de compétence */
    delete: operations["deleteSkillTypeItem"];
    /** Modifie les types de compétence */
    patch: operations["patchSkillTypeItem"];
    parameters: {};
  };
  "/api/time-slots": {
    /** Récupère les plages horaires */
    get: operations["getTimeSlotCollection"];
    /** Créer une plage horaire */
    post: operations["postTimeSlotCollection"];
    parameters: {};
  };
  "/api/time-slots/{id}": {
    /** Supprime une plage horaire */
    delete: operations["deleteTimeSlotItem"];
    /** Modifie une plage horaire */
    patch: operations["patchTimeSlotItem"];
    parameters: {};
  };
  "/api/units": {
    /** Récupère les unités */
    get: operations["getUnitCollection"];
    /** Créer une unité */
    post: operations["postUnitCollection"];
    parameters: {};
  };
  "/api/units/{id}": {
    /** Supprime une unité */
    delete: operations["deleteUnitItem"];
    /** Modifie une unité */
    patch: operations["patchUnitItem"];
    parameters: {};
  };
  "/api/vat-messages": {
    /** Récupère les messages TVA */
    get: operations["getVatMessageCollection"];
    /** Créer un message TVA */
    post: operations["postVatMessageCollection"];
    parameters: {};
  };
  "/api/vat-messages/{id}": {
    /** Supprime un message TVA */
    delete: operations["deleteVatMessageItem"];
    /** Modifie un message TVA */
    patch: operations["patchVatMessageItem"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    "Address-Carrier-read": {
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address-Carrier-write": {
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address-OutTrainer-read": {
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address-OutTrainer-write": {
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address.jsonld-Carrier-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address.jsonld-Carrier-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address.jsonld-OutTrainer-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    "Address.jsonld-OutTrainer-write": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /**
       * Adresse
       * Format: streetAddress
       * @description Adresse
       * @example 5 rue Alfred Nobel
       */
      address?: string | null;
      /**
       * Complément d'adresse
       * Format: streetAddress
       * @description Complément d'adresse
       * @example ZA La charrière
       */
      address2?: string | null;
      /**
       * Ville
       * Format: addressLocality
       * @description Ville
       * @example Rioz
       */
      city?: string | null;
      /**
       * Pays
       * Format: addressLocality
       * @description Pays
       * @example FR
       */
      country?: string | null;
      /**
       * E-mail
       * Format: email
       * @description E-mail
       * @example sales@tconcept.fr
       */
      email?: string | null;
      /**
       * Numéro de téléphone
       * Format: telephone
       * @description Numéro de téléphone
       * @example 03 84 91 99 84
       */
      phoneNumber?: string | null;
      /**
       * Code postal
       * Format: postalCode
       * @description Code postal
       * @example 70190
       */
      zipCode?: string | null;
    };
    /** @description Authentification */
    Auth: {
      /**
       * @description Mot de passe
       * @example super
       */
      password: string;
      /**
       * @description Identifiant
       * @example super
       */
      username: string;
    };
    /** @description Transporteur */
    "Carrier-Carrier-read": {
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address-Carrier-read"];
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example DHL
       */
      name: string;
    };
    /** @description Transporteur */
    "Carrier-Carrier-write": {
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address-Carrier-write"];
      /**
       * Nom
       * @description Nom
       * @example DHL
       */
      name: string;
    };
    /** @description Transporteur */
    "Carrier.jsonld-Carrier-read": {
      /** @example /api/contexts/Carrier */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/carriers/1 */
      "@id": string;
      /** @example Carrier */
      "@type": string;
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address.jsonld-Carrier-read"];
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example DHL
       */
      name: string;
    };
    /** @description Transporteur */
    "Carrier.jsonld-Carrier-write": {
      /** @example /api/contexts/Carrier */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/carriers/1 */
      "@id"?: string;
      /** @example Carrier */
      "@type"?: string;
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address.jsonld-Carrier-write"];
      /**
       * Nom
       * @description Nom
       * @example DHL
       */
      name: string;
    };
    /** @description Couleur */
    "Color-Color-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * nom
       * @description nom
       * @example Gris
       */
      name: string;
      /**
       * rgb
       * @description rgb
       * @example #848484
       */
      rgb: string | null;
    };
    /** @description Couleur */
    "Color-Color-write": {
      /**
       * nom
       * @description nom
       * @example Gris
       */
      name: string;
      /**
       * rgb
       * @description rgb
       * @example #848484
       */
      rgb: string | null;
    };
    /** @description Couleur */
    "Color.jsonld-Color-read": {
      /** @example /api/contexts/Color */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/colors/1 */
      "@id": string;
      /** @example Color */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * nom
       * @description nom
       * @example Gris
       */
      name: string;
      /**
       * rgb
       * @description rgb
       * @example #848484
       */
      rgb: string | null;
    };
    /** @description Couleur */
    "Color.jsonld-Color-write": {
      /** @example /api/contexts/Color */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/colors/1 */
      "@id"?: string;
      /** @example Color */
      "@type"?: string;
      /**
       * nom
       * @description nom
       * @example Gris
       */
      name: string;
      /**
       * rgb
       * @description rgb
       * @example #848484
       */
      rgb: string | null;
    };
    /** @description Famille de composant */
    "ComponentFamily-ComponentFamily-read": {
      /**
       * Code
       * @description Code
       * @example CAB
       */
      code: string | null;
      /**
       * Cuivré
       * @description Cuivré
       * @example true
       */
      copperable?: boolean;
      customsCode?: string | null;
      /**
       * Icône
       * @description Icône
       * @example /uploads/component-families/1.jpg
       */
      filepath?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Câbles
       */
      name: string;
      /**
       * Famille parente
       * Format: iri-reference
       * @description Famille parente
       * @example /api/component-families/2
       */
      parent?: string | null;
    };
    /** @description Famille de composant */
    "ComponentFamily-ComponentFamily-write": {
      /**
       * @description Nom
       * @example Câbles
       */
      name: string;
      /**
       * Format: iri-reference
       * @description Famille parente
       * @example /api/component-families/2
       */
      parent?: string | null;
      /**
       * @description Code
       * @example CAB
       */
      code: string | null;
      /**
       * @description Cuivré
       * @example true
       */
      copperable?: boolean;
      customsCode?: string | null;
      /** Format: binary */
      file?: string | null;
    };
    /** @description Famille de composant */
    "ComponentFamily.jsonld-ComponentFamily-read": {
      /** @example /api/contexts/ComponentFamily */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/component-families/1 */
      "@id": string;
      /** @example ComponentFamily */
      "@type": string;
      /**
       * Code
       * @description Code
       * @example CAB
       */
      code: string;
      /**
       * Cuivré
       * @description Cuivré
       * @example true
       */
      copperable?: boolean;
      customsCode?: string | null;
      /**
       * Icône
       * @description Icône
       * @example /uploads/component-families/1.jpg
       */
      filepath?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Câbles
       */
      name: string;
      /**
       * Famille parente
       * Format: iri-reference
       * @description Famille parente
       * @example /api/component-families/2
       */
      parent?: string | null;
    };
    /** @description Groupe de contrepartie de test */
    CounterPartGroup: {
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      name: string;
      safetyDevice?: boolean;
      type?: string;
    };
    /** @description Groupe de contrepartie de test */
    "CounterPartGroup.jsonld": {
      /** @example /api/contexts/CounterPartGroup */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/counter-part-groups/1 */
      "@id": string;
      /** @example CounterPartGroup */
      "@type": string;
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      name: string;
      safetyDevice?: boolean;
      type?: string;
    };
    /** @description Devises */
    "Currency-Currency-read": {
      /**
       * Active
       * @description Active
       * @example true
       */
      active?: boolean;
      /**
       * Enfants
       * @description Enfants
       * @example /api/currencies/2,/api/currencies/3
       */
      children?: string[];
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Euro
       */
      name: string | null;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/currencies/1
       */
      parent?: string | null;
      /**
       * Symbole
       * @description Symbole
       * @example €
       */
      symbol?: string | null;
    };
    /** @description Devises */
    "Currency-Currency-write": {
      /**
       * Active
       * @description Active
       * @example true
       */
      active?: boolean;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/currencies/1
       */
      parent?: string | null;
    };
    /** @description Devises */
    "Currency.jsonld-Currency-read": {
      "@id": string;
      "@type": string;
      /** @example /api/contexts/Currency */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /**
       * Active
       * @description Active
       * @example true
       */
      active?: boolean;
      /**
       * Enfants
       * @description Enfants
       * @example /api/currencies/2,/api/currencies/3
       */
      children?: string[];
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Euro
       */
      name: string | null;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/currencies/1
       */
      parent?: string | null;
      /**
       * Symbole
       * @description Symbole
       * @example €
       */
      symbol?: string | null;
    };
    "CurrentPlace-Product-collection": {
      /** Format: date-time */
      date?: string;
      /**
       * Nom
       * @description Nom
       */
      name: string | null;
    };
    "CurrentPlace-Product-read": {
      /** Format: date-time */
      date?: string;
      /**
       * Nom
       * @description Nom
       */
      name: string | null;
    };
    "CurrentPlace.jsonld-Product-collection": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: date-time */
      date?: string;
      /**
       * Nom
       * @description Nom
       */
      name: string | null;
    };
    "CurrentPlace.jsonld-Product-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: date-time */
      date?: string;
      /**
       * Nom
       * @description Nom
       */
      name: string | null;
    };
    /** @description Employé */
    "Employee-Employee-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Super
       */
      name: string;
      /**
       * Rôles
       * @description Rôles
       * @example ROLE_USER
       */
      roles?: string[];
      /**
       * Token
       * @description Token
       * @example 47e65f14b42a5398c1eea9125aaf93e44b1ddeb93ea2cca769ea897e0a285e4e7cfac21dee1a56396e15c1c5ee7c8d4e0bf692c83cda86a6462ad707
       */
      token?: string | null;
      /**
       * identifiant
       * @description identifiant
       * @example super
       */
      username?: string;
    };
    /** @description Employé */
    "Employee.jsonld-Employee-read": {
      /** @example /api/contexts/Employee */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/employees/1 */
      "@id": string;
      /** @example Employee */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Super
       */
      name: string;
      /**
       * Rôles
       * @description Rôles
       * @example ROLE_USER
       */
      roles?: string[];
      /**
       * Token
       * @description Token
       * @example 47e65f14b42a5398c1eea9125aaf93e44b1ddeb93ea2cca769ea897e0a285e4e7cfac21dee1a56396e15c1c5ee7c8d4e0bf692c83cda86a6462ad707
       */
      token: string;
      /**
       * identifiant
       * @description identifiant
       * @example super
       */
      username?: string;
    };
    /** @description Groupe d'équipement */
    "EngineGroup-EngineGroup-read": {
      /**
       * Code
       * @description Code
       * @example TA
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Table d'assemblage
       */
      name: string;
      safetyDevice?: boolean;
    };
    /** @description Groupe d'équipement */
    "EngineGroup-EngineGroup-write": {
      /**
       * Code
       * @description Code
       * @example TA
       */
      code: string;
      /**
       * Nom
       * @description Nom
       * @example Table d'assemblage
       */
      name: string;
      safetyDevice?: boolean;
    };
    /** @description Groupe d'équipement */
    "EngineGroup.jsonld-EngineGroup-read": {
      "@id": string;
      "@type": string;
      /** @example /api/contexts/EngineGroup */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /**
       * Code
       * @description Code
       * @example TA
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Table d'assemblage
       */
      name: string;
      safetyDevice?: boolean;
    };
    /** @description Type d'événements */
    "EventType-EventType-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example ABSENCE
       */
      name: string;
      /**
       * Status
       * @description Status
       * @example blocked
       * @enum {string|null}
       */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** @description Type d'événements */
    "EventType-EventType-write": {
      /**
       * Nom
       * @description Nom
       * @example ABSENCE
       */
      name: string;
      /**
       * Status
       * @description Status
       * @example blocked
       * @enum {string|null}
       */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** @description Type d'événements */
    "EventType.jsonld-EventType-read": {
      /** @example /api/contexts/EventType */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/event-types/1 */
      "@id": string;
      /** @example EventType */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example ABSENCE
       */
      name: string;
      /**
       * Status
       * @description Status
       * @example blocked
       * @enum {string|null}
       */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** @description Type d'événements */
    "EventType.jsonld-EventType-write": {
      /** @example /api/contexts/EventType */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/event-types/1 */
      "@id"?: string;
      /** @example EventType */
      "@type"?: string;
      /**
       * Nom
       * @description Nom
       * @example ABSENCE
       */
      name: string;
      /**
       * Status
       * @description Status
       * @example blocked
       * @enum {string|null}
       */
      toStatus?: ("blocked" | "disabled" | "enabled" | "warning") | null;
    };
    /** @description Incoterms */
    "Incoterms-Incoterms-read": {
      /**
       * Code
       * @description Code
       * @example DDP
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Delivered Duty Paid
       */
      name: string;
    };
    /** @description Incoterms */
    "Incoterms-Incoterms-write": {
      /**
       * Code
       * @description Code
       * @example DDP
       */
      code: string;
      /**
       * Nom
       * @description Nom
       * @example Delivered Duty Paid
       */
      name: string;
    };
    /** @description Incoterms */
    "Incoterms.jsonld-Incoterms-read": {
      /** @example /api/contexts/Incoterms */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/incoterms/1 */
      "@id": string;
      /** @example Incoterms */
      "@type": string;
      /**
       * Code
       * @description Code
       * @example DDP
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Delivered Duty Paid
       */
      name: string;
    };
    /** @description Incoterms */
    "Incoterms.jsonld-Incoterms-write": {
      /** @example /api/contexts/Incoterms */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/incoterms/1 */
      "@id"?: string;
      /** @example Incoterms */
      "@type"?: string;
      /**
       * Code
       * @description Code
       * @example DDP
       */
      code: string;
      /**
       * Nom
       * @description Nom
       * @example Delivered Duty Paid
       */
      name: string;
    };
    /** @description Délai de paiement des factures */
    "InvoiceTimeDue-InvoiceTimeDue-read": {
      /**
       * Jours
       * @description Jours
       * @example 30
       */
      days?: number | null;
      /**
       * Jours après la fin du mois
       * @description Jours après la fin du mois
       */
      daysAfterEndOfMonth?: number | null;
      /**
       * Fin du mois
       * @description Fin du mois
       * @example true
       */
      endOfMonth?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example 30 jours fin de mois
       */
      name: string;
    };
    /** @description Délai de paiement des factures */
    "InvoiceTimeDue-InvoiceTimeDue-write": {
      /**
       * Jours
       * @description Jours
       * @example 30
       */
      days?: number | null;
      /**
       * Jours après la fin du mois
       * @description Jours après la fin du mois
       */
      daysAfterEndOfMonth?: number | null;
      /**
       * Fin du mois
       * @description Fin du mois
       * @example true
       */
      endOfMonth?: boolean;
      /**
       * Nom
       * @description Nom
       * @example 30 jours fin de mois
       */
      name: string;
    };
    /** @description Délai de paiement des factures */
    "InvoiceTimeDue.jsonld-InvoiceTimeDue-read": {
      /** @example /api/contexts/InvoiceTimeDue */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/invoice-time-dues/1 */
      "@id": string;
      /** @example InvoiceTimeDue */
      "@type": string;
      /**
       * Jours
       * @description Jours
       * @example 30
       */
      days?: number | null;
      /**
       * Jours après la fin du mois
       * @description Jours après la fin du mois
       */
      daysAfterEndOfMonth?: number | null;
      /**
       * Fin du mois
       * @description Fin du mois
       * @example true
       */
      endOfMonth?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example 30 jours fin de mois
       */
      name: string;
    };
    /** @description Délai de paiement des factures */
    "InvoiceTimeDue.jsonld-InvoiceTimeDue-write": {
      /** @example /api/contexts/InvoiceTimeDue */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/invoice-time-dues/1 */
      "@id"?: string;
      /** @example InvoiceTimeDue */
      "@type"?: string;
      /**
       * Jours
       * @description Jours
       * @example 30
       */
      days?: number | null;
      /**
       * Jours après la fin du mois
       * @description Jours après la fin du mois
       */
      daysAfterEndOfMonth?: number | null;
      /**
       * Fin du mois
       * @description Fin du mois
       * @example true
       */
      endOfMonth?: boolean;
      /**
       * Nom
       * @description Nom
       * @example 30 jours fin de mois
       */
      name: string;
    };
    /** @description Temps */
    "Measure-duration": {
      /**
       * @description Code
       * @default s
       * @example s
       */
      code?: string;
      /**
       * @description Valeur
       * @example 1
       */
      value?: number;
    };
    /** @description Masse */
    "Measure-mass": {
      /**
       * @description Code
       * @default kg
       * @example kg
       */
      code?: string;
      /**
       * @description Valeur
       * @example 1
       */
      value?: number;
    };
    /** @description Prix */
    "Measure-price": {
      /**
       * @description Code
       * @default €
       * @example €
       */
      code?: string;
      /**
       * @description Valeur
       * @example 1
       */
      value?: number;
    };
    /** @description Unitaire */
    "Measure-unitary": {
      /**
       * @description Code
       * @default U
       * @example U
       */
      code?: string;
      /**
       * @description Valeur
       * @example 1
       */
      value?: number;
    };
    /** @description Notifications */
    Notification: {
      category?: string | null;
      /**
       * Format: date-time
       * @default CURRENT_TIMESTAMP
       * @example CURRENT_TIMESTAMP
       */
      createdAt?: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      read?: boolean;
      subject?: string | null;
      /** Format: iri-reference */
      user?: string;
    };
    /** @description Notifications */
    "Notification.jsonld": {
      "@id": string;
      "@type": string;
      /** @example /api/contexts/Notification */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      category?: string | null;
      /**
       * Format: date-time
       * @default CURRENT_TIMESTAMP
       * @example CURRENT_TIMESTAMP
       */
      createdAt?: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      read?: boolean;
      subject?: string | null;
      /** Format: iri-reference */
      user?: string;
    };
    /** @description Formateur extérieur */
    "OutTrainer-OutTrainer-read": {
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address-OutTrainer-read"];
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Prénom
       * @description Prénom
       * @example Rawaa
       */
      name: string;
      /**
       * Nom
       * @description Nom
       * @example CHRAIET
       */
      surname: string;
    };
    /** @description Formateur extérieur */
    "OutTrainer-OutTrainer-write": {
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address-OutTrainer-write"];
      /**
       * Prénom
       * @description Prénom
       * @example Rawaa
       */
      name: string;
      /**
       * Nom
       * @description Nom
       * @example CHRAIET
       */
      surname: string;
    };
    /** @description Formateur extérieur */
    "OutTrainer.jsonld-OutTrainer-read": {
      /** @example /api/contexts/OutTrainer */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/out-trainers/1 */
      "@id": string;
      /** @example OutTrainer */
      "@type": string;
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address.jsonld-OutTrainer-read"];
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Prénom
       * @description Prénom
       * @example Rawaa
       */
      name: string;
      /**
       * Nom
       * @description Nom
       * @example CHRAIET
       */
      surname: string;
    };
    /** @description Formateur extérieur */
    "OutTrainer.jsonld-OutTrainer-write": {
      /** @example /api/contexts/OutTrainer */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/out-trainers/1 */
      "@id"?: string;
      /** @example OutTrainer */
      "@type"?: string;
      /**
       * Adresse
       * @description Adresse
       */
      address?: components["schemas"]["Address.jsonld-OutTrainer-write"];
      /**
       * Prénom
       * @description Prénom
       * @example Rawaa
       */
      name: string;
      /**
       * Nom
       * @description Nom
       * @example CHRAIET
       */
      surname: string;
    };
    /** @description Produit */
    "Product-Product-clone": {
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product-Product-collection": {
      /** @description Statut */
      currentPlace?: components["schemas"]["CurrentPlace-Product-collection"];
      /**
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product-Product-create": {
      /**
       * Date d'expiration
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Famille de produit
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * Volume prévisionnel
       * @description Volume prévisionnel
       */
      forecastVolume?: components["schemas"]["Measure-unitary"];
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Type
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * Nom
       * @description Nom
       * @example HEATING WIRE (HSR25304)
       */
      name: string;
      /**
       * Notes
       * @description Notes
       * @example Produit préféré des clients
       */
      notes?: string | null;
      /**
       * Conditionnement
       * @description Conditionnement
       */
      packaging: components["schemas"]["Measure-unitary"];
      /**
       * Notes
       * @description Notes
       * @example Type de packaging
       */
      packagingKind?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
      /**
       * Unité
       * Format: iri-reference
       * @description Unité
       * @example /api/units/1
       */
      unit: string;
    };
    /** @description Produit */
    "Product-Product-read": {
      /**
       * Statut
       * @description Statut
       */
      currentPlace?: components["schemas"]["CurrentPlace-Product-read"];
      /**
       * Code douanier
       * @description Code douanier
       * @example 8544300089
       */
      customsCode?: string | null;
      /**
       * Date d'expiration
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Famille de produit
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * Volume prévisionnel
       * @description Volume prévisionnel
       */
      forecastVolume?: components["schemas"]["Measure-unitary"];
      /**
       * Incoterms
       * Format: iri-reference
       * @description Incoterms
       * @example /api/incoterms/1
       */
      incoterms: string | null;
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Indice interne
       * @description Indice interne
       * @default 1
       * @example 1
       */
      internalIndex: number;
      /**
       * Type
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * Gestion cuivre
       * @description Gestion cuivre
       * @example true
       */
      managedCopper?: boolean;
      /**
       * Nombre max de prototypes
       * @description Nombre max de prototypes
       */
      maxProto: components["schemas"]["Measure-unitary"];
      /**
       * Délai de livraison minimum
       * @description Délai de livraison minimum
       */
      minDelivery: components["schemas"]["Measure-unitary"];
      /**
       * Production minimum
       * @description Production minimum
       */
      minProd: components["schemas"]["Measure-unitary"];
      /**
       * Stock minimum
       * @description Stock minimum
       */
      minStock: components["schemas"]["Measure-unitary"];
      /**
       * Nom
       * @description Nom
       * @example HEATING WIRE (HSR25304)
       */
      name: string;
      /**
       * Notes
       * @description Notes
       * @example Produit préféré des clients
       */
      notes?: string | null;
      /**
       * Conditionnement
       * @description Conditionnement
       */
      packaging: components["schemas"]["Measure-unitary"];
      /**
       * Notes
       * @description Notes
       * @example Type de packaging
       */
      packagingKind?: string;
      /**
       * Unité parente
       * Format: iri-reference
       * @description Unité parente
       * @example /api/products/3
       */
      parent?: string | null;
      /**
       * Prix
       * @description Prix
       */
      price: components["schemas"]["Measure-price"];
      /**
       * Prix sans cuivre
       * @description Prix sans cuivre
       */
      priceWithoutCopper: components["schemas"]["Measure-price"];
      /**
       * Délai de production
       * @description Délai de production
       */
      productionDelay: components["schemas"]["Measure-duration"];
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
      /**
       * Prix de cession des composants
       * @description Prix de cession des composants
       */
      transfertPriceSupplies: components["schemas"]["Measure-price"];
      /**
       * Prix de cession de main d'œuvre
       * @description Prix de cession de main d'œuvre
       */
      transfertPriceWork: components["schemas"]["Measure-price"];
      /**
       * Unité
       * Format: iri-reference
       * @description Unité
       * @example /api/units/1
       */
      unit: string;
      /**
       * Poids
       * @description Poids
       */
      weight?: components["schemas"]["Measure-mass"];
    };
    /** @description Produit */
    "Product-Product-upgrade": {
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product-Product-write": {
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Type
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * Nom
       * @description Nom
       * @example HEATING WIRE (HSR25304)
       */
      name: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product.jsonld-Product-clone": {
      /** @example /api/contexts/Product */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/products/1 */
      "@id"?: string;
      /** @example Product */
      "@type"?: string;
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product.jsonld-Product-collection": {
      "@id"?: string;
      "@type"?: string;
      /** @description Statut */
      currentPlace?: components["schemas"]["CurrentPlace.jsonld-Product-collection"];
      /**
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Produit */
    "Product.jsonld-Product-create": {
      /** @example /api/contexts/Product */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/products/1 */
      "@id"?: string;
      /** @example Product */
      "@type"?: string;
      /**
       * Date d'expiration
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Famille de produit
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * Volume prévisionnel
       * @description Volume prévisionnel
       */
      forecastVolume?: components["schemas"]["Measure-unitary"];
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Type
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * Nom
       * @description Nom
       * @example HEATING WIRE (HSR25304)
       */
      name: string;
      /**
       * Notes
       * @description Notes
       * @example Produit préféré des clients
       */
      notes?: string | null;
      /**
       * Conditionnement
       * @description Conditionnement
       */
      packaging: components["schemas"]["Measure-unitary"];
      /**
       * Notes
       * @description Notes
       * @example Type de packaging
       */
      packagingKind?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
      /**
       * Unité
       * Format: iri-reference
       * @description Unité
       * @example /api/units/1
       */
      unit: string;
    };
    /** @description Produit */
    "Product.jsonld-Product-read": {
      /** @example /api/contexts/Product */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/products/1 */
      "@id": string;
      /** @example Product */
      "@type": string;
      /**
       * Statut
       * @description Statut
       */
      currentPlace?: components["schemas"]["CurrentPlace.jsonld-Product-read"];
      /**
       * Code douanier
       * @description Code douanier
       * @example 8544300089
       */
      customsCode?: string | null;
      /**
       * Date d'expiration
       * Format: date-time
       * @description Date d'expiration
       * @example 2021-01-12
       */
      expirationDate?: string | null;
      /**
       * Famille de produit
       * Format: iri-reference
       * @description Famille de produit
       * @example /api/product-families/1
       */
      family?: string;
      /**
       * Volume prévisionnel
       * @description Volume prévisionnel
       */
      forecastVolume?: components["schemas"]["Measure-unitary"];
      /**
       * Incoterms
       * Format: iri-reference
       * @description Incoterms
       * @example /api/incoterms/1
       */
      incoterms: string;
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Indice interne
       * @description Indice interne
       * @default 1
       * @example 1
       */
      internalIndex: number;
      /**
       * Type
       * @description Type
       * @default Prototype
       * @example Prototype
       * @enum {string|null}
       */
      kind?: ("EI" | "Prototype" | "Série" | "Pièce de rechange") | null;
      /**
       * Gestion cuivre
       * @description Gestion cuivre
       * @example true
       */
      managedCopper?: boolean;
      /**
       * Nombre max de prototypes
       * @description Nombre max de prototypes
       */
      maxProto: components["schemas"]["Measure-unitary"];
      /**
       * Délai de livraison minimum
       * @description Délai de livraison minimum
       */
      minDelivery: components["schemas"]["Measure-unitary"];
      /**
       * Production minimum
       * @description Production minimum
       */
      minProd: components["schemas"]["Measure-unitary"];
      /**
       * Stock minimum
       * @description Stock minimum
       */
      minStock: components["schemas"]["Measure-unitary"];
      /**
       * Nom
       * @description Nom
       * @example HEATING WIRE (HSR25304)
       */
      name: string;
      /**
       * Notes
       * @description Notes
       * @example Produit préféré des clients
       */
      notes?: string | null;
      /**
       * Conditionnement
       * @description Conditionnement
       */
      packaging: components["schemas"]["Measure-unitary"];
      /**
       * Notes
       * @description Notes
       * @example Type de packaging
       */
      packagingKind?: string;
      /**
       * Unité parente
       * Format: iri-reference
       * @description Unité parente
       * @example /api/products/3
       */
      parent?: string | null;
      /**
       * Prix
       * @description Prix
       */
      price: components["schemas"]["Measure-price"];
      /**
       * Prix sans cuivre
       * @description Prix sans cuivre
       */
      priceWithoutCopper: components["schemas"]["Measure-price"];
      /**
       * Délai de production
       * @description Délai de production
       */
      productionDelay: components["schemas"]["Measure-duration"];
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
      /**
       * Prix de cession des composants
       * @description Prix de cession des composants
       */
      transfertPriceSupplies: components["schemas"]["Measure-price"];
      /**
       * Prix de cession de main d'œuvre
       * @description Prix de cession de main d'œuvre
       */
      transfertPriceWork: components["schemas"]["Measure-price"];
      /**
       * Unité
       * Format: iri-reference
       * @description Unité
       * @example /api/units/1
       */
      unit: string;
      /**
       * Poids
       * @description Poids
       */
      weight?: components["schemas"]["Measure-mass"];
    };
    /** @description Produit */
    "Product.jsonld-Product-upgrade": {
      /** @example /api/contexts/Product */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/products/1 */
      "@id"?: string;
      /** @example Product */
      "@type"?: string;
      /**
       * Indice
       * @description Indice
       * @example 02
       */
      index?: string;
      /**
       * Référence
       * @description Référence
       * @example 54587F
       */
      ref?: string;
    };
    /** @description Famille de produit */
    "ProductFamily-ProductFamily-read": {
      customsCode?: string | null;
      /**
       * Icône
       * @description Icône
       * @example /uploads/product-families/1.jpg
       */
      filepath?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Faisceaux
       */
      name: string;
      /**
       * Famille parente
       * Format: iri-reference
       * @description Famille parente
       * @example /api/product-families/1
       */
      parent?: string | null;
    };
    /** @description Famille de produit */
    "ProductFamily-ProductFamily-write": {
      /**
       * @description Nom
       * @example Faisceaux
       */
      name: string;
      /**
       * Format: iri-reference
       * @description Famille parente
       * @example /api/product-families/1
       */
      parent?: string | null;
      customsCode?: string | null;
      /** Format: binary */
      file?: string | null;
    };
    /** @description Famille de produit */
    "ProductFamily.jsonld-ProductFamily-read": {
      /** @example /api/contexts/ProductFamily */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/product-families/1 */
      "@id": string;
      /** @example ProductFamily */
      "@type": string;
      customsCode?: string | null;
      /**
       * Icône
       * @description Icône
       * @example /uploads/product-families/1.jpg
       */
      filepath?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Faisceaux
       */
      name: string;
      /**
       * Famille parente
       * Format: iri-reference
       * @description Famille parente
       * @example /api/product-families/1
       */
      parent?: string | null;
    };
    /** @description Type qualité */
    "QualityType-QualityType-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Dimensions
       */
      name: string;
    };
    /** @description Type qualité */
    "QualityType-QualityType-write": {
      /**
       * Nom
       * @description Nom
       * @example Dimensions
       */
      name: string;
    };
    /** @description Type qualité */
    "QualityType.jsonld-QualityType-read": {
      /** @example /api/contexts/QualityType */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/quality-types/1 */
      "@id": string;
      /** @example QualityType */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Dimensions
       */
      name: string;
    };
    /** @description Type qualité */
    "QualityType.jsonld-QualityType-write": {
      /** @example /api/contexts/QualityType */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/quality-types/1 */
      "@id"?: string;
      /** @example QualityType */
      "@type"?: string;
      /**
       * Nom
       * @description Nom
       * @example Dimensions
       */
      name: string;
    };
    /** @description Type de rebus */
    "RejectType-RejectType-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example sertissage dimensionnelle
       */
      name: string;
    };
    /** @description Type de rebus */
    "RejectType-RejectType-write": {
      /**
       * Nom
       * @description Nom
       * @example sertissage dimensionnelle
       */
      name: string;
    };
    /** @description Type de rebus */
    "RejectType.jsonld-RejectType-read": {
      /** @example /api/contexts/RejectType */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/reject-types/1 */
      "@id": string;
      /** @example RejectType */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example sertissage dimensionnelle
       */
      name: string;
    };
    /** @description Type de rebus */
    "RejectType.jsonld-RejectType-write": {
      /** @example /api/contexts/RejectType */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/reject-types/1 */
      "@id"?: string;
      /** @example RejectType */
      "@type"?: string;
      /**
       * Nom
       * @description Nom
       * @example sertissage dimensionnelle
       */
      name: string;
    };
    /** @description Type de compétence */
    "SkillType-SkillType-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Assemblage
       */
      name: string;
    };
    /** @description Type de compétence */
    "SkillType-SkillType-write": {
      /**
       * Nom
       * @description Nom
       * @example Assemblage
       */
      name: string;
    };
    /** @description Type de compétence */
    "SkillType.jsonld-SkillType-read": {
      /** @example /api/contexts/SkillType */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/skill-types/1 */
      "@id": string;
      /** @example SkillType */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Assemblage
       */
      name: string;
    };
    /** @description Type de compétence */
    "SkillType.jsonld-SkillType-write": {
      /** @example /api/contexts/SkillType */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/skill-types/1 */
      "@id"?: string;
      /** @example SkillType */
      "@type"?: string;
      /**
       * Nom
       * @description Nom
       * @example Assemblage
       */
      name: string;
    };
    /** @description Plages horaires */
    "TimeSlot-TimeSlot-read": {
      /**
       * Fin
       * Format: date-time
       * @description Fin
       * @example 17:30:00
       */
      end?: string;
      /**
       * Fin pause
       * Format: date-time
       * @description Fin pause
       * @example 13:30:00
       */
      endBreak?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Journée
       */
      name: string;
      /**
       * Début
       * Format: date-time
       * @description Début
       * @example 07:30:00
       */
      start?: string;
      /**
       * Début pause
       * Format: date-time
       * @description Début pause
       * @example 12:30:00
       */
      startBreak?: string | null;
    };
    /** @description Plages horaires */
    "TimeSlot-TimeSlot-write": {
      /**
       * Fin
       * Format: date-time
       * @description Fin
       * @example 17:30:00
       */
      end?: string;
      /**
       * Fin pause
       * Format: date-time
       * @description Fin pause
       * @example 13:30:00
       */
      endBreak?: string | null;
      /**
       * Nom
       * @description Nom
       * @example Journée
       */
      name: string;
      /**
       * Début
       * Format: date-time
       * @description Début
       * @example 07:30:00
       */
      start?: string;
      /**
       * Début pause
       * Format: date-time
       * @description Début pause
       * @example 12:30:00
       */
      startBreak?: string | null;
    };
    /** @description Plages horaires */
    "TimeSlot.jsonld-TimeSlot-read": {
      /** @example /api/contexts/TimeSlot */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/time-slots/1 */
      "@id": string;
      /** @example TimeSlot */
      "@type": string;
      /**
       * Fin
       * Format: date-time
       * @description Fin
       * @example 17:30:00
       */
      end?: string;
      /**
       * Fin pause
       * Format: date-time
       * @description Fin pause
       * @example 13:30:00
       */
      endBreak?: string | null;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Journée
       */
      name: string;
      /**
       * Début
       * Format: date-time
       * @description Début
       * @example 07:30:00
       */
      start?: string;
      /**
       * Début pause
       * Format: date-time
       * @description Début pause
       * @example 12:30:00
       */
      startBreak?: string | null;
    };
    /** @description Plages horaires */
    "TimeSlot.jsonld-TimeSlot-write": {
      /** @example /api/contexts/TimeSlot */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/time-slots/1 */
      "@id"?: string;
      /** @example TimeSlot */
      "@type"?: string;
      /**
       * Fin
       * Format: date-time
       * @description Fin
       * @example 17:30:00
       */
      end?: string;
      /**
       * Fin pause
       * Format: date-time
       * @description Fin pause
       * @example 13:30:00
       */
      endBreak?: string | null;
      /**
       * Nom
       * @description Nom
       * @example Journée
       */
      name: string;
      /**
       * Début
       * Format: date-time
       * @description Début
       * @example 07:30:00
       */
      start?: string;
      /**
       * Début pause
       * Format: date-time
       * @description Début pause
       * @example 12:30:00
       */
      startBreak?: string | null;
    };
    /** @description Groupe d'outil */
    ToolGroup: {
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      name: string;
      safetyDevice?: boolean;
    };
    /** @description Groupe d'outil */
    "ToolGroup.jsonld": {
      /** @example /api/contexts/ToolGroup */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/tool-groups/1 */
      "@id": string;
      /** @example ToolGroup */
      "@type": string;
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      name: string;
      safetyDevice?: boolean;
    };
    /** @description Unit */
    "Unit-Unit-read": {
      /**
       * @default 1
       * @example 1
       */
      base: number;
      /**
       * Enfants
       * @description Enfants
       * @example /api/units/2,/api/units/3
       */
      children?: string[];
      /**
       * Code
       * @description Code
       * @example g
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Nom
       * @description Nom
       * @example Gramme
       */
      name: string;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/units/1
       */
      parent?: string | null;
    };
    /** @description Unit */
    "Unit-Unit-write": {
      /**
       * @default 1
       * @example 1
       */
      base: number;
      /**
       * Code
       * @description Code
       * @example g
       */
      code: string;
      /**
       * Nom
       * @description Nom
       * @example Gramme
       */
      name: string;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/units/1
       */
      parent?: string | null;
    };
    /** @description Unit */
    "Unit.jsonld-Unit-read": {
      /** @example /api/contexts/Unit */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/units/1 */
      "@id": string;
      /** @example Unit */
      "@type": string;
      /**
       * @default 1
       * @example 1
       */
      base: number;
      /**
       * Enfants
       * @description Enfants
       * @example /api/units/2,/api/units/3
       */
      children?: string[];
      /**
       * Code
       * @description Code
       * @example g
       */
      code: string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Nom
       * @description Nom
       * @example Gramme
       */
      name: string;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/units/1
       */
      parent?: string | null;
    };
    /** @description Unit */
    "Unit.jsonld-Unit-write": {
      /** @example /api/contexts/Unit */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/units/1 */
      "@id"?: string;
      /** @example Unit */
      "@type"?: string;
      /**
       * @default 1
       * @example 1
       */
      base: number;
      /**
       * Code
       * @description Code
       * @example g
       */
      code: string;
      /**
       * Nom
       * @description Nom
       * @example Gramme
       */
      name: string;
      /**
       * Parent
       * Format: iri-reference
       * @description Parent
       * @example /api/units/1
       */
      parent?: string | null;
    };
    /** @description Message TVA */
    "VatMessage-VatMessage-read": {
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      /**
       * Message
       * @description Message
       * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
       */
      name: string;
    };
    /** @description Message TVA */
    "VatMessage-VatMessage-write": {
      /**
       * Message
       * @description Message
       * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
       */
      name: string;
    };
    /** @description Message TVA */
    "VatMessage.jsonld-VatMessage-read": {
      /** @example /api/contexts/VatMessage */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/vat-messages/1 */
      "@id": string;
      /** @example VatMessage */
      "@type": string;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      /**
       * Message
       * @description Message
       * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
       */
      name: string;
    };
    /** @description Message TVA */
    "VatMessage.jsonld-VatMessage-write": {
      /** @example /api/contexts/VatMessage */
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/vat-messages/1 */
      "@id"?: string;
      /** @example VatMessage */
      "@type"?: string;
      /**
       * Message
       * @description Message
       * @example Ventes intra-communautaire : Exonération de TVA article 262 TERI du CGI.
       */
      name: string;
    };
    Violation: {
      /** @example c1051bb4-d103-4f74-8988-acbcafc7fdc3 */
      code: string;
      /** @example This value should not be blank. */
      message: string;
      /** @example name */
      propertyPath: string;
    };
    Violations: {
      /** @example /api/contexts/ConstraintViolationList */
      "@context"?: string;
      /** @example ConstraintViolationList */
      "@type"?: string;
      /** @example An error occurred */
      "hydra:title"?: string;
      /**
       * @example name: This value should not be blank.
       * name: This value should not be blank.
       */
      "hydra:description"?: string;
      violations: components["schemas"]["Violation"][];
    };
    /** @description WorkstationGroup */
    WorkstationGroup: {
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id?: number;
      name: string;
      safetyDevice?: boolean;
    };
    /** @description WorkstationGroup */
    "WorkstationGroup.jsonld": {
      /** @example /api/contexts/WorkstationGroup */
      "@context":
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      /** @example /api/workstation-groups/1 */
      "@id": string;
      /** @example WorkstationGroup */
      "@type": string;
      code: string;
      deleted?: boolean;
      /**
       * id
       * @description id
       * @example 1
       */
      id: number;
      name: string;
      safetyDevice?: boolean;
    };
  };
}

export interface operations {
  /** Connexion */
  login: {
    parameters: {};
    responses: {
      /** Utilisateur connecté */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Employee.jsonld-Employee-read"];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** Identifiants */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Auth"];
      };
    };
  };
  /** Déconnexion */
  logout: {
    parameters: {};
    responses: {
      /** Déconnexion réussie */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les transporteurs */
  getCarrierCollection: {
    parameters: {
      query: {
        "address.address"?: string;
        "address.address2"?: string;
        "address.city"?: string;
        "address.country"?: string;
        "address.email"?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Carrier collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Carrier.jsonld-Carrier-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Carrier-Carrier-read"][];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"][];
          "text/html": components["schemas"]["Carrier-Carrier-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un transporteur */
  postCarrierCollection: {
    parameters: {};
    responses: {
      /** Carrier resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-read"];
          "application/json": components["schemas"]["Carrier-Carrier-read"];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"];
          "text/html": components["schemas"]["Carrier-Carrier-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Carrier resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-write"];
        "application/json": components["schemas"]["Carrier-Carrier-write"];
        "multipart/form-data": components["schemas"]["Carrier-Carrier-write"];
        "text/html": components["schemas"]["Carrier-Carrier-write"];
      };
    };
  };
  /** Supprime un transporteur */
  deleteCarrierItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Carrier resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un transporteur */
  patchCarrierItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Carrier resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Carrier.jsonld-Carrier-read"];
          "application/json": components["schemas"]["Carrier-Carrier-read"];
          "multipart/form-data": components["schemas"]["Carrier-Carrier-read"];
          "text/html": components["schemas"]["Carrier-Carrier-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Carrier resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Carrier-Carrier-write"];
      };
    };
  };
  /** Récupère les couleurs */
  getColorCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
        rgb?: string;
      };
    };
    responses: {
      /** Color collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Color.jsonld-Color-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Color-Color-read"][];
          "multipart/form-data": components["schemas"]["Color-Color-read"][];
          "text/html": components["schemas"]["Color-Color-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une couleur */
  postColorCollection: {
    parameters: {};
    responses: {
      /** Color resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Color.jsonld-Color-read"];
          "application/json": components["schemas"]["Color-Color-read"];
          "multipart/form-data": components["schemas"]["Color-Color-read"];
          "text/html": components["schemas"]["Color-Color-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Color resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Color.jsonld-Color-write"];
        "application/json": components["schemas"]["Color-Color-write"];
        "multipart/form-data": components["schemas"]["Color-Color-write"];
        "text/html": components["schemas"]["Color-Color-write"];
      };
    };
  };
  /** Supprime une couleur */
  deleteColorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Color resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une couleur */
  patchColorItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Color resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Color.jsonld-Color-read"];
          "application/json": components["schemas"]["Color-Color-read"];
          "multipart/form-data": components["schemas"]["Color-Color-read"];
          "text/html": components["schemas"]["Color-Color-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Color resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Color-Color-write"];
      };
    };
  };
  /** Récupère les familles de composant */
  getComponentFamilyCollection: {
    parameters: {
      query: {
        code?: string;
        copperable?: boolean;
        customsCode?: string;
        name?: string;
        parent?: number;
      };
    };
    responses: {
      /** ComponentFamily collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une famille de composant */
  postComponentFamilyCollection: {
    parameters: {};
    responses: {
      /** ComponentFamily resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"];
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ComponentFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-write"];
      };
    };
  };
  /** Modifie une famille de composant */
  postComponentFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ComponentFamily resource created */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ComponentFamily.jsonld-ComponentFamily-read"];
          "application/json": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-read"];
          "text/html": components["schemas"]["ComponentFamily-ComponentFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ComponentFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ComponentFamily-ComponentFamily-write"];
      };
    };
  };
  /** Supprime une famille de composant */
  deleteComponentFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ComponentFamily resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les devises */
  getCurrencyCollection: {
    parameters: {};
    responses: {
      /** Currency collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Currency.jsonld-Currency-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Currency-Currency-read"][];
          "multipart/form-data": components["schemas"]["Currency-Currency-read"][];
          "text/html": components["schemas"]["Currency-Currency-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une devise */
  patchCurrencyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Currency resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Currency.jsonld-Currency-read"];
          "application/json": components["schemas"]["Currency-Currency-read"];
          "multipart/form-data": components["schemas"]["Currency-Currency-read"];
          "text/html": components["schemas"]["Currency-Currency-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Currency resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Currency-Currency-write"];
      };
    };
  };
  /** Récupère un employé */
  getEmployeeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Employee resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Employee.jsonld-Employee-read"];
          "application/json": components["schemas"]["Employee-Employee-read"];
          "multipart/form-data": components["schemas"]["Employee-Employee-read"];
          "text/html": components["schemas"]["Employee-Employee-read"];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** créer un groupe de contrepartie de test */
  postCounterPartGroupCollection: {
    parameters: {};
    responses: {
      /** CounterPartGroup resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["CounterPartGroup.jsonld"];
          "application/json": components["schemas"]["CounterPartGroup"];
          "multipart/form-data": components["schemas"]["CounterPartGroup"];
          "text/html": components["schemas"]["CounterPartGroup"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new CounterPartGroup resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["CounterPartGroup.jsonld"];
        "application/json": components["schemas"]["CounterPartGroup"];
        "multipart/form-data": components["schemas"]["CounterPartGroup"];
        "text/html": components["schemas"]["CounterPartGroup"];
      };
    };
  };
  /** Récupère les groupes d'équipement */
  getEngineGroupCollection: {
    parameters: {
      query: {
        code?: string;
        name?: string;
        /** The collection page number */
        page?: number;
        safetyDevice?: boolean;
      };
    };
    responses: {
      /** EngineGroup collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["EngineGroup.jsonld-EngineGroup-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["EngineGroup-EngineGroup-read"][];
          "multipart/form-data": components["schemas"]["EngineGroup-EngineGroup-read"][];
          "text/html": components["schemas"]["EngineGroup-EngineGroup-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Supprime un groupe d'équipement */
  deleteEngineGroupItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EngineGroup resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un groupe d'équipement */
  patchEngineGroupItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EngineGroup resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["EngineGroup.jsonld-EngineGroup-read"];
          "application/json": components["schemas"]["EngineGroup-EngineGroup-read"];
          "multipart/form-data": components["schemas"]["EngineGroup-EngineGroup-read"];
          "text/html": components["schemas"]["EngineGroup-EngineGroup-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated EngineGroup resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["EngineGroup-EngineGroup-write"];
      };
    };
  };
  /** Créer un groupe d'outil */
  postToolGroupCollection: {
    parameters: {};
    responses: {
      /** ToolGroup resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ToolGroup.jsonld"];
          "application/json": components["schemas"]["ToolGroup"];
          "multipart/form-data": components["schemas"]["ToolGroup"];
          "text/html": components["schemas"]["ToolGroup"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ToolGroup resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ToolGroup.jsonld"];
        "application/json": components["schemas"]["ToolGroup"];
        "multipart/form-data": components["schemas"]["ToolGroup"];
        "text/html": components["schemas"]["ToolGroup"];
      };
    };
  };
  /** Créer un groupe de poste de travail */
  postWorkstationGroupCollection: {
    parameters: {};
    responses: {
      /** WorkstationGroup resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["WorkstationGroup.jsonld"];
          "application/json": components["schemas"]["WorkstationGroup"];
          "multipart/form-data": components["schemas"]["WorkstationGroup"];
          "text/html": components["schemas"]["WorkstationGroup"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new WorkstationGroup resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["WorkstationGroup.jsonld"];
        "application/json": components["schemas"]["WorkstationGroup"];
        "multipart/form-data": components["schemas"]["WorkstationGroup"];
        "text/html": components["schemas"]["WorkstationGroup"];
      };
    };
  };
  /** Récupère les types d'événements */
  getEventTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
        toStatus?: "blocked" | "disabled" | "enabled" | "warning";
      };
    };
    responses: {
      /** EventType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["EventType.jsonld-EventType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["EventType-EventType-read"][];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"][];
          "text/html": components["schemas"]["EventType-EventType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type d'événements */
  postEventTypeCollection: {
    parameters: {};
    responses: {
      /** EventType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["EventType.jsonld-EventType-read"];
          "application/json": components["schemas"]["EventType-EventType-read"];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"];
          "text/html": components["schemas"]["EventType-EventType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new EventType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["EventType.jsonld-EventType-write"];
        "application/json": components["schemas"]["EventType-EventType-write"];
        "multipart/form-data": components["schemas"]["EventType-EventType-write"];
        "text/html": components["schemas"]["EventType-EventType-write"];
      };
    };
  };
  /** Supprime un type d'événements */
  deleteEventTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EventType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type d'événements */
  patchEventTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** EventType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["EventType.jsonld-EventType-read"];
          "application/json": components["schemas"]["EventType-EventType-read"];
          "multipart/form-data": components["schemas"]["EventType-EventType-read"];
          "text/html": components["schemas"]["EventType-EventType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated EventType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["EventType-EventType-write"];
      };
    };
  };
  /** Récupère les incoterms */
  getIncotermsCollection: {
    parameters: {
      query: {
        code?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Incoterms collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Incoterms.jsonld-Incoterms-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Incoterms-Incoterms-read"][];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"][];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un incoterms */
  postIncotermsCollection: {
    parameters: {};
    responses: {
      /** Incoterms resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-read"];
          "application/json": components["schemas"]["Incoterms-Incoterms-read"];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Incoterms resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-write"];
        "application/json": components["schemas"]["Incoterms-Incoterms-write"];
        "multipart/form-data": components["schemas"]["Incoterms-Incoterms-write"];
        "text/html": components["schemas"]["Incoterms-Incoterms-write"];
      };
    };
  };
  /** Supprime un incoterms */
  deleteIncotermsItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Incoterms resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un incoterms */
  patchIncotermsItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Incoterms resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Incoterms.jsonld-Incoterms-read"];
          "application/json": components["schemas"]["Incoterms-Incoterms-read"];
          "multipart/form-data": components["schemas"]["Incoterms-Incoterms-read"];
          "text/html": components["schemas"]["Incoterms-Incoterms-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Incoterms resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Incoterms-Incoterms-write"];
      };
    };
  };
  /** Récupère les délais de paiement des factures */
  getInvoiceTimeDueCollection: {
    parameters: {
      query: {
        endOfMonth?: boolean;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** InvoiceTimeDue collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un délai de paiement des factures */
  postInvoiceTimeDueCollection: {
    parameters: {};
    responses: {
      /** InvoiceTimeDue resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"];
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new InvoiceTimeDue resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-write"];
        "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
        "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
        "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
      };
    };
  };
  /** Supprime un délai de paiement des factures */
  deleteInvoiceTimeDueItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** InvoiceTimeDue resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un délai de paiement des factures */
  patchInvoiceTimeDueItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** InvoiceTimeDue resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["InvoiceTimeDue.jsonld-InvoiceTimeDue-read"];
          "application/json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "multipart/form-data": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
          "text/html": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated InvoiceTimeDue resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["InvoiceTimeDue-InvoiceTimeDue-write"];
      };
    };
  };
  /** Récupère les notifications de l'utilisateur courant */
  getNotificationCollection: {
    parameters: {};
    responses: {
      /** Notification collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Notification.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Notification"][];
          "multipart/form-data": components["schemas"]["Notification"][];
          "text/html": components["schemas"]["Notification"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Supprime les notifications de l'utilisateur dans la catégorie */
  deleteNotificationCollection: {
    parameters: {};
    responses: {
      /** Notification resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Marque les notifications de l'utilisateur dans la catégorie */
  patchNotificationCollection: {
    parameters: {};
    responses: {
      /** Notification resource updated */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Notification.jsonld"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Notification"][];
          "multipart/form-data": components["schemas"]["Notification"][];
          "text/html": components["schemas"]["Notification"][];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Supprime la notification */
  deleteNotificationItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Notification resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Marque la notifications comme lue */
  patchNotificationItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Notification resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Notification.jsonld"];
          "application/json": components["schemas"]["Notification"];
          "multipart/form-data": components["schemas"]["Notification"];
          "text/html": components["schemas"]["Notification"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les formateurs extérieurs */
  getOutTrainerCollection: {
    parameters: {
      query: {
        "address.address"?: string;
        "address.address2"?: string;
        "address.city"?: string;
        "address.country"?: string;
        "address.email"?: string;
        name?: string;
        /** The collection page number */
        page?: number;
        surname?: string;
      };
    };
    responses: {
      /** OutTrainer collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"][];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"][];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un formateur extérieur */
  postOutTrainerCollection: {
    parameters: {};
    responses: {
      /** OutTrainer resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"];
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new OutTrainer resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-write"];
        "application/json": components["schemas"]["OutTrainer-OutTrainer-write"];
        "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-write"];
        "text/html": components["schemas"]["OutTrainer-OutTrainer-write"];
      };
    };
  };
  /** Supprime un formateur extérieur */
  deleteOutTrainerItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OutTrainer resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un formateur extérieur */
  patchOutTrainerItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** OutTrainer resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["OutTrainer.jsonld-OutTrainer-read"];
          "application/json": components["schemas"]["OutTrainer-OutTrainer-read"];
          "multipart/form-data": components["schemas"]["OutTrainer-OutTrainer-read"];
          "text/html": components["schemas"]["OutTrainer-OutTrainer-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated OutTrainer resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["OutTrainer-OutTrainer-write"];
      };
    };
  };
  /** Récupère les produits */
  getProductCollection: {
    parameters: {
      query: {
        currentPlace?: string;
        "expirationDate[after]"?: string;
        "expirationDate[before]"?: string;
        "expirationDate[strictly_after]"?: string;
        "expirationDate[strictly_before]"?: string;
        family?: string;
        index?: string;
        kind?: string;
        "order[index]"?: "asc" | "desc";
        "order[kind]"?: "asc" | "desc";
        "order[ref]"?: "asc" | "desc";
        /** The collection page number */
        page?: number;
        ref?: string;
      };
    };
    responses: {
      /** Product collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.jsonld-Product-collection"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Product-Product-collection"][];
          "multipart/form-data": components["schemas"]["Product-Product-collection"][];
          "text/html": components["schemas"]["Product-Product-collection"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un produit */
  postProductCollection: {
    parameters: {};
    responses: {
      /** Product resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Product resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Product.jsonld-Product-create"];
        "application/json": components["schemas"]["Product-Product-create"];
        "multipart/form-data": components["schemas"]["Product-Product-create"];
        "text/html": components["schemas"]["Product-Product-create"];
      };
    };
  };
  /** Récupère un produit */
  getProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Supprime un produit */
  deleteProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Clone un produit */
  cloneProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Product resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Product.jsonld-Product-clone"];
        "application/json": components["schemas"]["Product-Product-clone"];
        "multipart/form-data": components["schemas"]["Product-Product-clone"];
        "text/html": components["schemas"]["Product-Product-clone"];
      };
    };
  };
  /** Transite le produit à son prochain statut de workflow */
  promoteProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
        transition:
          | "block"
          | "disable"
          | "partially_unlock"
          | "partially_validate"
          | "submit_validation"
          | "unlock"
          | "validate";
      };
    };
    responses: {
      /** Product resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Product resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Product-Product-write"];
      };
    };
  };
  /** Évolue le produit au prochain indice */
  upgradeProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Product resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Product resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Product.jsonld-Product-upgrade"];
        "application/json": components["schemas"]["Product-Product-upgrade"];
        "multipart/form-data": components["schemas"]["Product-Product-upgrade"];
        "text/html": components["schemas"]["Product-Product-upgrade"];
      };
    };
  };
  /** Modifie un produit */
  patchProductItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
        process: "admin" | "logistics" | "main" | "production" | "project";
      };
    };
    responses: {
      /** Product resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Product.jsonld-Product-read"];
          "application/json": components["schemas"]["Product-Product-read"];
          "multipart/form-data": components["schemas"]["Product-Product-read"];
          "text/html": components["schemas"]["Product-Product-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Product resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Product-Product-write"];
      };
    };
  };
  /** Récupère les familles de produit */
  getProductFamilyCollection: {
    parameters: {
      query: {
        customsCode?: string;
        name?: string;
        parent?: number;
      };
    };
    responses: {
      /** ProductFamily collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"][];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"][];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une famille de produit */
  postProductFamilyCollection: {
    parameters: {};
    responses: {
      /** ProductFamily resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"];
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ProductFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-write"];
      };
    };
  };
  /** Modifie une famille de produit */
  postProductFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ProductFamily resource created */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ProductFamily.jsonld-ProductFamily-read"];
          "application/json": components["schemas"]["ProductFamily-ProductFamily-read"];
          "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-read"];
          "text/html": components["schemas"]["ProductFamily-ProductFamily-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new ProductFamily resource */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ProductFamily-ProductFamily-write"];
      };
    };
  };
  /** Supprime une famille de produit */
  deleteProductFamilyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** ProductFamily resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Récupère les types qualités */
  getQualityTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** QualityType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["QualityType.jsonld-QualityType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["QualityType-QualityType-read"][];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"][];
          "text/html": components["schemas"]["QualityType-QualityType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type qualité */
  postQualityTypeCollection: {
    parameters: {};
    responses: {
      /** QualityType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-read"];
          "application/json": components["schemas"]["QualityType-QualityType-read"];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"];
          "text/html": components["schemas"]["QualityType-QualityType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new QualityType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-write"];
        "application/json": components["schemas"]["QualityType-QualityType-write"];
        "multipart/form-data": components["schemas"]["QualityType-QualityType-write"];
        "text/html": components["schemas"]["QualityType-QualityType-write"];
      };
    };
  };
  /** Supprime un type qualité */
  deleteQualityTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** QualityType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type qualité */
  patchQualityTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** QualityType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["QualityType.jsonld-QualityType-read"];
          "application/json": components["schemas"]["QualityType-QualityType-read"];
          "multipart/form-data": components["schemas"]["QualityType-QualityType-read"];
          "text/html": components["schemas"]["QualityType-QualityType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated QualityType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["QualityType-QualityType-write"];
      };
    };
  };
  /** Récupère les type de rebus */
  getRejectTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** RejectType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["RejectType.jsonld-RejectType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["RejectType-RejectType-read"][];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"][];
          "text/html": components["schemas"]["RejectType-RejectType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un type de rebus */
  postRejectTypeCollection: {
    parameters: {};
    responses: {
      /** RejectType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-read"];
          "application/json": components["schemas"]["RejectType-RejectType-read"];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"];
          "text/html": components["schemas"]["RejectType-RejectType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new RejectType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-write"];
        "application/json": components["schemas"]["RejectType-RejectType-write"];
        "multipart/form-data": components["schemas"]["RejectType-RejectType-write"];
        "text/html": components["schemas"]["RejectType-RejectType-write"];
      };
    };
  };
  /** Supprime un type de rebus */
  deleteRejectTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** RejectType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un type de rebus */
  patchRejectTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** RejectType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["RejectType.jsonld-RejectType-read"];
          "application/json": components["schemas"]["RejectType-RejectType-read"];
          "multipart/form-data": components["schemas"]["RejectType-RejectType-read"];
          "text/html": components["schemas"]["RejectType-RejectType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated RejectType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["RejectType-RejectType-write"];
      };
    };
  };
  /** Récupère les types de compétence */
  getSkillTypeCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** SkillType collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["SkillType.jsonld-SkillType-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["SkillType-SkillType-read"][];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"][];
          "text/html": components["schemas"]["SkillType-SkillType-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer les types de compétence */
  postSkillTypeCollection: {
    parameters: {};
    responses: {
      /** SkillType resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-read"];
          "application/json": components["schemas"]["SkillType-SkillType-read"];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"];
          "text/html": components["schemas"]["SkillType-SkillType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new SkillType resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-write"];
        "application/json": components["schemas"]["SkillType-SkillType-write"];
        "multipart/form-data": components["schemas"]["SkillType-SkillType-write"];
        "text/html": components["schemas"]["SkillType-SkillType-write"];
      };
    };
  };
  /** Supprime les types de compétence */
  deleteSkillTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** SkillType resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie les types de compétence */
  patchSkillTypeItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** SkillType resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["SkillType.jsonld-SkillType-read"];
          "application/json": components["schemas"]["SkillType-SkillType-read"];
          "multipart/form-data": components["schemas"]["SkillType-SkillType-read"];
          "text/html": components["schemas"]["SkillType-SkillType-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated SkillType resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["SkillType-SkillType-write"];
      };
    };
  };
  /** Récupère les plages horaires */
  getTimeSlotCollection: {
    parameters: {
      query: {
        end?: string;
        endBreak?: string;
        name?: string;
        /** The collection page number */
        page?: number;
        start?: string;
        startBreak?: string;
      };
    };
    responses: {
      /** TimeSlot collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"][];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"][];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une plage horaire */
  postTimeSlotCollection: {
    parameters: {};
    responses: {
      /** TimeSlot resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"];
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new TimeSlot resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-write"];
        "application/json": components["schemas"]["TimeSlot-TimeSlot-write"];
        "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-write"];
        "text/html": components["schemas"]["TimeSlot-TimeSlot-write"];
      };
    };
  };
  /** Supprime une plage horaire */
  deleteTimeSlotItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** TimeSlot resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une plage horaire */
  patchTimeSlotItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** TimeSlot resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["TimeSlot.jsonld-TimeSlot-read"];
          "application/json": components["schemas"]["TimeSlot-TimeSlot-read"];
          "multipart/form-data": components["schemas"]["TimeSlot-TimeSlot-read"];
          "text/html": components["schemas"]["TimeSlot-TimeSlot-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated TimeSlot resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["TimeSlot-TimeSlot-write"];
      };
    };
  };
  /** Récupère les unités */
  getUnitCollection: {
    parameters: {
      query: {
        code?: string;
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** Unit collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["Unit.jsonld-Unit-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["Unit-Unit-read"][];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"][];
          "text/html": components["schemas"]["Unit-Unit-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer une unité */
  postUnitCollection: {
    parameters: {};
    responses: {
      /** Unit resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["Unit.jsonld-Unit-read"];
          "application/json": components["schemas"]["Unit-Unit-read"];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"];
          "text/html": components["schemas"]["Unit-Unit-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new Unit resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["Unit.jsonld-Unit-write"];
        "application/json": components["schemas"]["Unit-Unit-write"];
        "multipart/form-data": components["schemas"]["Unit-Unit-write"];
        "text/html": components["schemas"]["Unit-Unit-write"];
      };
    };
  };
  /** Supprime une unité */
  deleteUnitItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Unit resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie une unité */
  patchUnitItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Unit resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Unit.jsonld-Unit-read"];
          "application/json": components["schemas"]["Unit-Unit-read"];
          "multipart/form-data": components["schemas"]["Unit-Unit-read"];
          "text/html": components["schemas"]["Unit-Unit-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated Unit resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Unit-Unit-write"];
      };
    };
  };
  /** Récupère les messages TVA */
  getVatMessageCollection: {
    parameters: {
      query: {
        name?: string;
        /** The collection page number */
        page?: number;
      };
    };
    responses: {
      /** VatMessage collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["VatMessage.jsonld-VatMessage-read"][];
            "hydra:totalItems"?: number;
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/json": components["schemas"]["VatMessage-VatMessage-read"][];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"][];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"][];
        };
      };
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Créer un message TVA */
  postVatMessageCollection: {
    parameters: {};
    responses: {
      /** VatMessage resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-read"];
          "application/json": components["schemas"]["VatMessage-VatMessage-read"];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The new VatMessage resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-write"];
        "application/json": components["schemas"]["VatMessage-VatMessage-write"];
        "multipart/form-data": components["schemas"]["VatMessage-VatMessage-write"];
        "text/html": components["schemas"]["VatMessage-VatMessage-write"];
      };
    };
  };
  /** Supprime un message TVA */
  deleteVatMessageItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** VatMessage resource deleted */
      204: never;
      /** Bad request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Modifie un message TVA */
  patchVatMessageItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** VatMessage resource updated */
      200: {
        content: {
          "application/ld+json": components["schemas"]["VatMessage.jsonld-VatMessage-read"];
          "application/json": components["schemas"]["VatMessage-VatMessage-read"];
          "multipart/form-data": components["schemas"]["VatMessage-VatMessage-read"];
          "text/html": components["schemas"]["VatMessage-VatMessage-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Resource not found */
      404: unknown;
      /** Method Not Allowed */
      405: unknown;
      /** Unprocessable entity */
      422: unknown;
      /** Internal Server Error */
      500: unknown;
    };
    /** The updated VatMessage resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["VatMessage-VatMessage-write"];
      };
    };
  };
}

export interface external {}
