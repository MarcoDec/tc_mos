<?php
namespace App\Command;

use App\Entity\It\Desadv;
use App\Service\NewFileDetector;
use Doctrine\ORM\EntityManagerInterface;
use Exception;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class DetectNewFilesCommand extends Command
{
//    protected static $defaultName = 'app:detect-new-files';

    public function __construct(private readonly NewFileDetector $detector, private EntityManagerInterface $entityManager)
    {
        parent::__construct();
    }

    protected function configure(): void
    {
        $this->setDescription('Detect new files in the remote directory.');
    }

    /**
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $directories = [
            '/',
            '/test/desadv'//,
//            '/path/to/remote/directory2',
//            '/path/to/remote/directory3',
        ];

        $newFilesDetected = false;

        foreach ($directories as $directory) {
            $output->writeln(sprintf('Recherche dans dossier %s', $directory));
            $newFiles = $this->detector->detectNewFiles($directory, $output);
            if (!empty($newFiles)) {
                $newFilesDetected = true;
                $output->writeln(sprintf('New files detected in %s: %s', $directory, implode(', ', $newFiles)));
                // On récupère le contenu des fichiers
                foreach ($newFiles as $newFile) {
                    $jsonContent = $this->detector->getFileContent($directory . "/" . $newFile);
                    $jsonDecoded = json_decode($jsonContent, true);
                    // On traite le contenu en fonction du répertoire d'origine
                    // Si le nom du répertoire contient desadv, on traite le contenu comme un fichier DESADV
                    if (str_contains($directory, 'desadv')) {
                        //le traitement du fichier DESADV consiste à l'enregistrer dans la base de données
                        $desadv = new Desadv();
                        $desadv->setMessageDate(new \DateTime($jsonDecoded['generationDate']));
                        $desadv->setRef($jsonDecoded['messageId']);
                        $desadv->setJson($jsonContent);
                        //si dans le dossier on trouve le mot test, on met le mode EDI à test
                        $desadv->setEdiMode(str_contains($directory, 'test') ? 'test' : 'prod');
                        $desadv->setSupplierOldId($jsonDecoded['supplierDetails']['ID']);
                        //on enregistre le DESADV en base de données
                        $this->entityManager->persist($desadv);
                        $this->entityManager->flush();
                    }
                }
            }
        }

        if (!$newFilesDetected) {
            $output->writeln('No new files detected.');
        }

        return $newFilesDetected ? 1 : 0;
    }
    function getName(): string
    {
        return 'app:detect-new-files'; // TODO: Change the autogenerated stub
    }
}
